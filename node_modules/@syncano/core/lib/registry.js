'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _https = require('https');

var _https2 = _interopRequireDefault(_https);

var _formData = require('form-data');

var _formData2 = _interopRequireDefault(_formData);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _queryBuilder = require('./query-builder');

var _queryBuilder2 = _interopRequireDefault(_queryBuilder);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('core:registry');

/**
 * Connection with Syncano Registry.
 * @property {Function}
 * @example {@lang javascript}
 * const socketList = await registry.searchSocketsByAll('facebook')
 */
class Socket extends _queryBuilder2.default {
  url(registryEndpoint) {
    return `${this._getSyncanoRegistryURL()}/${registryEndpoint}/`;
  }

  async searchSocketsByAll(keyword) {
    debug(`searchSocketsByAll: ${keyword}`);
    const headers = {
      'X-Syncano-Account-Key': this.instance.accountKey
    };
    const options = {
      method: 'POST',
      body: JSON.stringify({ keyword })
    };

    return this.nonInstanceFetch(this.url('registry/search'), options, headers);
  }

  async searchSocketByName(name, version) {
    debug(`searchSocketByName: ${name} (${version})`);

    const headers = {
      'X-Syncano-Account-Key': this.instance.accountKey
    };
    const options = {
      method: 'POST',
      body: JSON.stringify({
        name,
        version
      })
    };

    return this.nonInstanceFetch(this.url('registry/get'), options, headers);
  }

  async publishSocket(socketName, version) {
    debug('publishSocket', socketName);
    const headers = {
      'X-Syncano-Account-Key': this.instance.accountKey
    };
    const options = {
      method: 'POST',
      body: JSON.stringify({
        name: socketName,
        version
      })
    };
    return this.nonInstanceFetch(this.url('registry/publish'), options, headers);
  }

  async getSocket(url, fileDescriptor) {
    debug('getSocket', url);
    return new Promise((resolve, reject) => {
      _https2.default.get(url, response => {
        response.pipe(fileDescriptor);
        fileDescriptor.on('finish', () => {
          debug('Socket zip downloaded');
          fileDescriptor.close(resolve);
        });
      });
    });
  }

  async submitSocket(socketSpec, socketConfig, socketZipPath) {
    debug('submitSocket', socketZipPath);

    const form = new _formData2.default();
    form.append('file', _fs2.default.createReadStream(socketZipPath));
    form.append('name', socketSpec.name);
    form.append('description', socketSpec.description);
    form.append('version', socketSpec.version);
    form.append('keywords', JSON.stringify(socketSpec.keywords || []));
    form.append('config', JSON.stringify(socketConfig));

    const headers = form.getHeaders();
    headers['X-Syncano-Account-Key'] = this.instance.accountKey;

    const options = {
      method: 'POST',
      body: form
    };

    return this.nonInstanceFetch(this.url('registry/add'), options, headers);
  }
}
exports.default = Socket;
module.exports = exports['default'];