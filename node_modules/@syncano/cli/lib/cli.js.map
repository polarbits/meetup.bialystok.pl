{"version":3,"sources":["../src/cli.js"],"names":["debug","commandDebug","options","cmd","find","option","Command","parent","rawArgs","slice","join","trackAndDebug","additionalParams","setup","version","session","load","command","group","description","action","notAlreadyInitialized","Init","run","isAuthenticated","instance","checkConnection","hasProjectPath","Attach","Login","Logout","hasProject","optionsToRun","trace","SocketDeployHot","SocketDeploy","SocketEndpointCall","SocketList","name","socketName","SocketInstall","SocketUninstall","SocketCreate","SocketConfig","SocketConfigSet","SocketConfigShow","keyword","outputHelp","SocketSearch","SocketSubmit","SocketPublish","SocketTrace","on","commandsArr","loadPlugins","parse","process","argv","length"],"mappings":"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","file":"cli.js","sourcesContent":["\nimport _ from 'lodash'\nimport Command from 'commander'\nimport program from './program'\nimport commands from './commands'\nimport context from './utils/context'\nimport validateCommands from './utils/validate-commands'\nimport initRaven from './utils/raven'\nimport session from './utils/session'\nimport logger from './utils/debug'\nimport pjson from '../package.json'\nimport { echo } from './utils/print-tools'\n\nconst { debug } = logger('main-cli')\ninitRaven()\n\nconst commandDebug = (options) => {\n  const cmd = _.find(options, (option) => option instanceof Command.Command)\n  debug(`Command: ${cmd.parent.rawArgs.slice(2).join(' ')}`)\n}\n\nconst trackAndDebug = (options, additionalParams) => {\n  commandDebug(options)\n}\n\nconst setup = async () => {\n  debug(pjson.version)\n  await context.session.load()\n\n  program\n    .version(pjson.version)\n\n  program\n    .command('init')\n    .group('Basics')\n    .description('Start a Syncano project in the current directory')\n    .option('-i, --instance <name>',\n    'Instance you want to use for your project. If not provided, an Instance will be created')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.notAlreadyInitialized()\n      new commands.Init(context).run(options)\n    })\n\n  program\n    .command('attach')\n    .group('Basics')\n    .description('Attach project to the chosen Instance')\n    .option('-i, --instance <name>', 'Instance you want to use for your project')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      if (options[0].instance) {\n        await session.checkConnection(options[0].instance)\n      }\n      session.hasProjectPath()\n      echo()\n      new commands.Attach(context).run(options)\n    })\n\n  program\n    .command('login')\n    .group('Basics')\n    .description('Login to your account')\n    .action((...options) => {\n      trackAndDebug(options)\n      new commands.Login(context).run(options)\n    })\n\n  program\n    .command('logout')\n    .group('Basics')\n    .description('Logout from your current account')\n    .action((...options) => {\n      trackAndDebug(options)\n      new commands.Logout(context).run(options)\n    })\n\n  program\n    .command('hot [socket_name]')\n    .group('Project')\n    .description('Hot deploy to make your project continuously synced to the Syncano cloud')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n\n      const optionsToRun = options\n      optionsToRun[1].trace = true\n      echo()\n      new commands.SocketDeployHot(context).run(optionsToRun)\n    })\n\n  program\n    .command('deploy [socket_name]')\n    .group('Project')\n    .description('Synchronize your project to Syncano')\n    .option('--hot', 'Enable Hot deploy')\n    .option('-b, --bail', 'Bail after first deploy failure')\n    .option('-i, --create-instance <instance>', 'Create instance if it doesn\\'t exist')\n    .option('-t, --trace', 'Turn on showing traces')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProjectPath()\n      await session.checkConnection()\n      echo()\n      new commands.SocketDeploy(context).run(options)\n    })\n\n  program\n    .command('call <socket_name>/<endpoint>')\n    .group('Project')\n    .description(\"Call Socket's endpoint\")\n    .option('-b, --body', 'Print only body of the response')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      new commands.SocketEndpointCall(context).run(options)\n    })\n\n  program\n    .command('list [socket_name]')\n    .group('Sockets')\n    .description('List the installed Sockets')\n    .option('-f, --full', 'Print the detailed information (including parameters and response)')\n    .option('-d, --with-deps', 'Print also Sockets which are dependencies of other Sockets')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      new commands.SocketList(context).run(options)\n    })\n\n  program\n    .command('add <socket_name>')\n    .group('Sockets')\n    .description('Add a Socket as a dependency of your project or local Socket')\n    .option('-s, --socket <socket>', 'Name of the Socket')\n    .action(async (...options) => {\n      const [name] = options\n      trackAndDebug(options, { socketName: name })\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.SocketInstall(context).run(options)\n    })\n\n  program\n    .command('remove <socket_name>')\n    .group('Sockets')\n    .description('Remove a Socket from your project')\n    .action(async (...options) => {\n      const [name] = options\n      trackAndDebug(options, { socketName: name })\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.SocketUninstall(context).run(options)\n    })\n\n  program\n    .command('create <socket_name>')\n    .group('Sockets')\n    .description('Create a new Socket for your project')\n    .action((...options) => {\n      const [name] = options\n      trackAndDebug(options, { socketName: name })\n      session.hasProject()\n      new commands.SocketCreate(context).run(options)\n    })\n\n  program\n    .command('config <socket_name>')\n    .group('Sockets')\n    .description('Configure a given Socket')\n    .action(async (...options) => {\n      const [name] = options\n      trackAndDebug(options, { name })\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      new commands.SocketConfig(context).run(options)\n    })\n\n  program\n    .command('config-set <socket_name> <option_name> <value>')\n    .group('Sockets')\n    .description('Configure a config option of a given Socket')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      new commands.SocketConfigSet(context).run(options)\n    })\n\n  program\n    .command('config-show <socket_name>')\n    .group('Sockets')\n    .description('Show config options of a Socket')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.SocketConfigShow(context).run(options)\n    })\n\n  program\n    .command('search [keyword]')\n    .group('Registry')\n    .description('Search for a specific Socket in the Sockets Registry')\n    .option('-l, --long', 'Display full descriptions')\n    .action((...options) => {\n      const [keyword] = options\n      trackAndDebug(options, { keyword })\n      if (!keyword) {\n        return program.outputHelp()\n      }\n      echo()\n      new commands.SocketSearch(context).run(options)\n    })\n\n  program\n    .command('submit <socket_name>')\n    .group('Registry')\n    .description('Submit a Socket to Socket Registry')\n    .option(\n      '-b, --bump <release type>',\n      'Bump version of the socket (major, premajor, minor, preminor, patch, prepatch, or prerelease)'\n    )\n    .action(async(...options) => {\n      const [name] = options\n      trackAndDebug(options, { socketName: name })\n      new commands.SocketSubmit(context).run(options)\n    })\n\n  program\n    .command('publish <socket_name>')\n    .group('Registry')\n    .description('Publish a Socket in a Socket Registry')\n    .option(\n      '-v, --version <socket version>',\n      'Version of the Socket you want to publish'\n    )\n    .action(async(...options) => {\n      const [name] = options\n      trackAndDebug(options, { socketName: name })\n      new commands.SocketPublish(context).run(options)\n    })\n\n  program\n    .command('trace [socket_name]')\n    .group('Project')\n    .description('Trace Socket calls')\n    .action(async (...options) => {\n      trackAndDebug(options)\n      session.isAuthenticated()\n      session.hasProject()\n      await session.checkConnection()\n      echo()\n      new commands.SocketTrace(context).run(options)\n    })\n\n  program\n    .command('hosting', 'Manage your web assets and host them on Syncano')\n    .on('*', (commandsArr) => validateCommands(commandsArr))\n\n  program\n    .command('component', 'Manage your Socket components')\n    .on('*', (commandsArr) => validateCommands(commandsArr))\n\n  program\n    .command('instance', 'Manage your instances')\n    .on('*', (commandsArr) => validateCommands(commandsArr))\n\n  context.session.loadPlugins(program, context)\n  program.parse(process.argv)\n\n  if (!process.argv.slice(2).length) {\n    program.outputHelp()\n  }\n}\n\nsetup()\n"]}