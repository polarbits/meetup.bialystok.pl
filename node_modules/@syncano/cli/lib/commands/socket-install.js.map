{"version":3,"sources":["../../src/commands/socket-install.js"],"names":["debug","SocketInstall","constructor","context","session","Socket","registry","Registry","run","socketName","cmd","socketFromRegistry","searchSocketByName","name","vesrion","socket","get","addDependency","add","status","grey","cyan","version","dim","deploy","err","response","data","red"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAM,EAAEA,KAAF,KAAY,qBAAO,oBAAP,CAAlB;;AAEe,MAAMC,aAAN,CAAoB;AACjCC,cAAaC,OAAb,EAAsB;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,MAAL,GAAcF,QAAQE,MAAtB;AACA,SAAKC,QAAL,GAAgB,IAAIH,QAAQI,QAAZ,EAAhB;AACD;;AAEKC,KAAN,CAAW,CAACC,UAAD,EAAaC,GAAb,CAAX,EAA8B;AAAA;;AAAA;AAC5B,UAAI,CAACD,UAAL,EAAiB,OAAO,uBAAM,sCAAN,CAAP;;AAEjB,UAAI;AACF,cAAME,qBAAqB,MAAM,MAAKL,QAAL,CAAcM,kBAAd,CAAiCH,UAAjC,CAAjC;AACAT,cAAO,iBAAgBW,mBAAmBE,IAAK,IAAGF,mBAAmBG,OAAQ,EAA7E;AACA,cAAKH,kBAAL,GAA0BA,kBAA1B;;AAEA,YAAID,IAAIK,MAAR,EAAgB;AACd;AACA,gBAAKA,MAAL,GAAc,MAAM,MAAKV,MAAL,CAAYW,GAAZ,CAAgBN,IAAIK,MAApB,CAApB;AACA,iBAAO,MAAKA,MAAL,CAAYE,aAAZ,CAA0BN,kBAA1B,CAAP;AACD;;AAED;AACA,cAAM,MAAKN,MAAL,CAAYa,GAAZ,CAAgBP,kBAAhB,CAAN;;AAEA,cAAMQ,SAAS,gBAAOC,IAAP,CAAY,eAAZ,CAAf;AACA,cAAMP,OAAO,gBAAOQ,IAAP,CAAY,MAAKV,kBAAL,CAAwBE,IAApC,CAAb;AACA,cAAMS,UAAU,gBAAOC,GAAP,CAAY,IAAG,MAAKZ,kBAAL,CAAwBW,OAAQ,GAA/C,CAAhB;AACA,8BAAK,CAAL,EAAS,GAAEH,MAAO,IAAG,6BAAc,IAAGN,IAAK,IAAGS,OAAQ,EAAtD;;AAEA,cAAME,SAAS,MAAM,2BAAoB,MAAKrB,OAAzB,CAArB;;AAEA,YAAIO,IAAIK,MAAR,EAAgB;AACd,iBAAOS,OAAOhB,GAAP,CAAW,CAAC,MAAKO,MAAL,CAAYF,IAAb,EAAmB,EAAnB,CAAX,CAAP;AACD;AACD,eAAOW,OAAOhB,GAAP,CAAW,CAAC,MAAKG,kBAAL,CAAwBE,IAAzB,EAA+B,EAA/B,CAAX,CAAP;AACD,OAzBD,CAyBE,OAAOY,GAAP,EAAY;AACZ,YAAIA,IAAIC,QAAR,EAAkB;AAChB,cAAID,IAAIC,QAAJ,CAAaP,MAAb,KAAwB,GAA5B,EAAiC;AAC/B;AACA,kCAAK,CAAL,EAAQ,oBAAR;AACA,kCAAK,CAAL,EAAS,8BAA6B,gBAAOE,IAAP,CAAY,kCAAZ,CAAgD,EAAtF;AACA;AACA;AACD;AACD,cAAII,IAAIC,QAAJ,CAAaC,IAAb,IAAqBF,IAAIC,QAAJ,CAAaC,IAAb,CAAkBd,IAA3C,EAAiD;AAC/C;AACA;AACA,mCAAM,CAAN,EAAS,gBAAOe,GAAP,CAAY,WAAUnB,UAAW,+BAAjC,CAAT;AACA,kCAAK,CAAL,EAAS,mBAAkB,gBAAOY,IAAP,CAAa,uBAAsBZ,UAAW,EAA9C,CAAiD,EAA5E;AACA;AACD;AACF,SAfD,MAeO;AACL;AACA,gCAAM,GAAE,gBAAOmB,GAAP,CAAWH,GAAX,CAAgB,IAAxB;AACA;AACD;AACF;AAjD2B;AAkD7B;AA1DgC;kBAAdxB,a","file":"socket-install.js","sourcesContent":["import format from 'chalk'\n\nimport logger from '../utils/debug'\nimport { echo, error } from '../utils/print-tools'\nimport { currentTime } from '../utils/date-utils'\nimport SocketDeployCmd from './socket-deploy'\n\nconst { debug } = logger('cmd-socket-install')\n\nexport default class SocketInstall {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n    this.Socket = context.Socket\n    this.registry = new context.Registry()\n  }\n\n  async run ([socketName, cmd]) {\n    if (!socketName) return error('Socket name is a required parameter!')\n\n    try {\n      const socketFromRegistry = await this.registry.searchSocketByName(socketName)\n      debug(`socket found: ${socketFromRegistry.name} ${socketFromRegistry.vesrion}`)\n      this.socketFromRegistry = socketFromRegistry\n\n      if (cmd.socket) {\n        // Socket dependency\n        this.socket = await this.Socket.get(cmd.socket)\n        return this.socket.addDependency(socketFromRegistry)\n      }\n\n      // Project dependency\n      await this.Socket.add(socketFromRegistry)\n\n      const status = format.grey('socket added:')\n      const name = format.cyan(this.socketFromRegistry.name)\n      const version = format.dim(`(${this.socketFromRegistry.version})`)\n      echo(7)(`${status} ${currentTime()} ${name} ${version}`)\n\n      const deploy = await new SocketDeployCmd(this.context)\n\n      if (cmd.socket) {\n        return deploy.run([this.socket.name, {}])\n      }\n      return deploy.run([this.socketFromRegistry.name, {}])\n    } catch (err) {\n      if (err.response) {\n        if (err.response.status === 404) {\n          echo()\n          echo(4)('No socket found ðŸ˜•')\n          echo(4)(`To search for socket type: ${format.cyan('syncano-cli search <socket name>')}`)\n          echo()\n          return\n        }\n        if (err.response.data && err.response.data.name) {\n          // Something wrong with the name\n          echo()\n          error(4)(format.red(`Socket \"${socketName}\" has already been installed!`))\n          echo(4)(`To upgrade type ${format.cyan(`syncano-cli upgrade ${socketName}`)}`)\n          echo()\n        }\n      } else {\n        echo()\n        echo(`${format.red(err)}\\n`)\n        echo()\n      }\n    }\n  }\n}\n"]}