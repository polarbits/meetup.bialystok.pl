'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _printTools = require('../utils/print-tools');

var _hosting = require('../utils/hosting');

var _hosting2 = _interopRequireDefault(_hosting);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

class HostingConfig {
  constructor(context) {
    this.context = context;
    this.hosting = null;
  }

  run([hostingName, cmd]) {
    var _this = this;

    return _asyncToGenerator(function* () {
      _this.cname = cmd.cname;
      _this.fullPath = null;

      try {
        _this.hosting = yield _hosting2.default.get(hostingName);

        if (!_this.hosting.existLocally) {
          (0, _printTools.warning)(4)('No such hosting!');
          (0, _printTools.echo)();
          process.exit(1);
        }
        if (cmd.removeCname && !_this.hosting.hasCNAME(cmd.removeCname)) {
          (0, _printTools.warning)(4)('This hosting doesn\'t have such CNAME!');
          (0, _printTools.echo)();
          process.exit(1);
        }

        let responses = {};
        if (!(cmd.removeCname || cmd.cname || cmd.browser_router)) {
          responses = (yield _inquirer2.default.prompt(_this.getQuestions())) || {};
        }

        const paramsToUpdate = {
          cname: _this.cname || responses.CNAME,
          removeCNAME: cmd.removeCname,
          browser_router: cmd.browser_router || responses.browser_router
        };

        yield _this.hosting.configure(paramsToUpdate);
        (0, _printTools.echo)(4)(_chalk2.default.green('Configuration successfully updated!'));
        (0, _printTools.echo)();
      } catch (err) {
        try {
          (0, _printTools.error)(4)(err.response.data.detail);
        } catch (printErr) {
          (0, _printTools.error)(4)(printErr.message);
        }
        (0, _printTools.echo)();
      }
    })();
  }

  getQuestions() {
    const questions = [];

    if (!this.cname) {
      questions.push({
        name: 'CNAME',
        message: (0, _printTools.p)(2)('Set CNAME now (your own domain) or leave it empty'),
        default: this.hosting.getCNAME()
      });
    }
    if (!this.browser_router) {
      questions.push({
        type: 'confirm',
        name: 'browser_router',
        message: (0, _printTools.p)(2)('Do you want to use BrowserRouter for this hosting?'),
        default: this.hosting.config.browser_router
      });
    }

    return questions;
  }
}

exports.default = HostingConfig;
module.exports = exports['default'];
//# sourceMappingURL=hosting-config.js.map