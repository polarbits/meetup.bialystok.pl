{"version":3,"sources":["../../src/commands/init.js"],"names":["debug","InitCmd","constructor","context","session","Init","run","cmd","settings","account","authenticated","red","init","project","instance","questions","name","type","message","choices","getTemplatesChoices","map","choice","default","cyan","promptResponses","prompt","templateName","Template","match","checkConnection","addConfigFiles","createFilesAndFolders","newInstance","load","checkConfigFiles","noConfigFiles"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAM,EAAEA,KAAF,KAAY,qBAAO,UAAP,CAAlB;;AAEA,MAAMC,OAAN,CAAc;AACZC,cAAaC,OAAb,EAAsB;AACpBH,UAAM,qBAAN;AACA,SAAKG,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,IAAL,GAAYF,QAAQE,IAApB;AACD;;AAEKC,KAAN,CAAW,CAACC,GAAD,CAAX,EAAkB;AAAA;;AAAA;AAChB,UAAI,CAAC,MAAKH,OAAL,CAAaI,QAAb,CAAsBC,OAAtB,CAA8BC,aAA9B,EAAL,EAAoD;AAClD;AACA,8BAAK,CAAL,EAAQ,gBAAOC,GAAP,CAAW,uDAAX,CAAR;AACA,cAAM,oBAAU,MAAKR,OAAf,EAAwBG,GAAxB,CAA4B,EAA5B,CAAN;AACD;;AAED,YAAKM,IAAL,GAAY,IAAI,MAAKP,IAAT,EAAZ;;AAEA,YAAM,EAAEQ,OAAF,KAAc,MAAKT,OAAzB;AACA,YAAM,EAAEU,QAAF,KAAeP,GAArB;;AAEA,YAAMQ,YAAY,CAChB;AACEC,cAAM,UADR;AAEEC,cAAM,MAFR;AAGEC,iBAAS,mBAAE,CAAF,EAAK,kCAAL,CAHX;AAIEC,iBAAS,MAAKd,IAAL,CAAUe,mBAAV,GAAgCC,GAAhC,CAAoC;AAAA,iBAAU,mBAAE,CAAF,EAAKC,MAAL,CAAV;AAAA,SAApC,CAJX;AAKEC,iBAAS;AALX,OADgB,CAAlB;;AAUA,UAAI,CAACV,OAAL,EAAc;AACZ;AACA,8BAAK,CAAL,EAAQ,gBAAOW,IAAP,CAAY,2BAAZ,CAAR;AACA;AACD,OAJD,MAIO;AACL;AACA,8BAAK,CAAL,EAAQ,8DAAR;AACA,8BAAK,CAAL,EAAQ,iEAAR;AACA;AACD;;AAED,YAAMC,kBAAkB,MAAM,mBAASC,MAAT,CAAgBX,SAAhB,CAA9B;AACA,YAAKH,IAAL,CAAUe,YAAV,GAAyBF,gBAAgBG,QAAhB,CAAyBC,KAAzB,CAA+B,UAA/B,EAA2C,CAA3C,CAAzB;;AAEA,UAAI,CAAChB,OAAD,IAAYC,QAAhB,EAA0B;AACxB,cAAM,MAAKV,OAAL,CAAa0B,eAAb,CAA6BhB,QAA7B,CAAN;AACA,cAAM,MAAKF,IAAL,CAAUmB,cAAV,CAAyB,EAAEjB,QAAF,EAAzB,CAAN;AACA,eAAO,MAAKF,IAAL,CAAUoB,qBAAV,EAAP;AACD;;AAED,UAAI,CAACnB,OAAD,IAAY,CAACC,QAAjB,EAA2B;AACzBd,cAAM,yBAAN;AACA,cAAMiC,cAAc,qCAApB;;AAEA,cAAM,MAAKrB,IAAL,CAAUmB,cAAV,CAAyB,EAAEjB,UAAUmB,YAAYjB,IAAxB,EAAzB,CAAN;AACA,cAAKJ,IAAL,CAAUoB,qBAAV;AACA,eAAO,MAAK5B,OAAL,CAAa8B,IAAb,EAAP;AACD;;AAED,UAAI,MAAKtB,IAAL,CAAUuB,gBAAV,EAAJ,EAAkC;AAChC,eAAO,MAAKvB,IAAL,CAAUwB,aAAV,EAAP;AACD;AArDe;AAsDjB;AA9DW;;kBAiECnC,O","file":"init.js","sourcesContent":["import format from 'chalk'\nimport inquirer from 'inquirer'\n\nimport logger from '../utils/debug'\nimport { createInstance } from './helpers/create-instance'\nimport { p, echo } from '../utils/print-tools'\nimport Login from './login'\n\nconst { debug } = logger('cmd-init')\n\nclass InitCmd {\n  constructor (context) {\n    debug('InitCmd.constructor')\n    this.context = context\n    this.session = context.session\n    this.Init = context.Init\n  }\n\n  async run ([cmd]) {\n    if (!this.session.settings.account.authenticated()) {\n      echo()\n      echo(4)(format.red('You have to be logged in to initialize a new project!'))\n      await new Login(this.context).run([])\n    }\n\n    this.init = new this.Init()\n\n    const { project } = this.session\n    const { instance } = cmd\n\n    const questions = [\n      {\n        name: 'Template',\n        type: 'list',\n        message: p(2)('Choose template for your project'),\n        choices: this.Init.getTemplatesChoices().map(choice => p(4)(choice)),\n        default: 1\n      }\n    ]\n\n    if (!project) {\n      echo()\n      echo(4)(format.cyan('New project? Exciting! ðŸŽ‰'))\n      echo()\n    } else {\n      echo()\n      echo(4)('I found the Syncano instance for the project in this folder,')\n      echo(4)(\"but you don't have any config files - I'll create them for you!\")\n      echo()\n    }\n\n    const promptResponses = await inquirer.prompt(questions)\n    this.init.templateName = promptResponses.Template.match(/\\((.*)\\)/)[1]\n\n    if (!project && instance) {\n      await this.session.checkConnection(instance)\n      await this.init.addConfigFiles({ instance })\n      return this.init.createFilesAndFolders()\n    }\n\n    if (!project && !instance) {\n      debug('no project, no instance')\n      const newInstance = createInstance()\n\n      await this.init.addConfigFiles({ instance: newInstance.name })\n      this.init.createFilesAndFolders()\n      return this.session.load()\n    }\n\n    if (this.init.checkConfigFiles()) {\n      return this.init.noConfigFiles()\n    }\n  }\n}\n\nexport default InitCmd\n"]}