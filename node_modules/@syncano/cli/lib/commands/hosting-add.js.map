{"version":3,"sources":["../../src/commands/hosting-add.js"],"names":["HostingAdd","constructor","context","session","Socket","hostingName","socket","run","folder","cmd","socketName","cname","fullPath","existsSync","green","process","exit","responses","prompt","getQuestions","name","params","get","addHosting","browser_router","src","relative","projectPath","join","cwd","CNAME","add","syncNewHosting","err","response","data","detail","printErr","message","syncQuestion","type","default","confirm","cyan","questions","validate","value","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;;;AAEA,MAAMA,UAAN,CAAiB;AACfC,cAAaC,OAAb,EAAsB;AACpB,SAAKA,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,MAAL,GAAcF,QAAQE,MAAtB;AACA,SAAKC,WAAL,GAAmB,IAAnB;AACA,SAAKC,MAAL,GAAc,IAAd;AACD;;AAEKC,KAAN,CAAW,CAACC,MAAD,EAASC,GAAT,CAAX,EAA0B;AAAA;;AAAA;AACxB,YAAKD,MAAL,GAAcA,MAAd;AACA,YAAKE,UAAL,GAAkBD,IAAIH,MAAtB;AACA,YAAKK,KAAL,GAAaF,IAAIE,KAAjB;AACA,YAAKC,QAAL,GAAgB,IAAhB;;AAEA,UAAI,CAAC,aAAGC,UAAH,CAAc,MAAKL,MAAnB,CAAL,EAAiC;AAC/B;AACA,+BAAM,CAAN,EAAS,+BAAT;AACA,8BAAK,CAAL,EAAS,QAAO,gBAAOM,KAAP,CAAa,qBAAb,CAAoC,sBAApD;AACA;AACAC,gBAAQC,IAAR,CAAa,CAAb;AACD;;AAED,YAAMC,YAAY,OAAM,mBAASC,MAAT,CAAgB,MAAKC,YAAL,EAAhB,CAAN,KAA8C,EAAhE;;AAEA,YAAKd,WAAL,GAAmBY,UAAUG,IAA7B;;AAEA,UAAI,MAAKV,UAAT,EAAqB;AACnB;AACA,cAAMW,SAAS,EAAf;AAEA,cAAKf,MAAL,GAAc,MAAM,MAAKF,MAAL,CAAYkB,GAAZ,CAAgBb,IAAIH,MAAJ,IAAcW,UAAUX,MAAxC,CAApB;AACA,cAAKA,MAAL,CAAYiB,UAAZ,CAAuB,MAAKlB,WAA5B,EAAyCgB,MAAzC;AACD,OAND,MAMO;AACL,cAAMA,SAAS;AACbD,gBAAM,MAAKf,WADE;AAEbmB,0BAAgBP,UAAUO,cAFb;AAGbC,eAAK,eAAKC,QAAL,CAAc,MAAKvB,OAAL,CAAawB,WAA3B,EAAwC,eAAKC,IAAL,CAAUb,QAAQc,GAAR,EAAV,EAAyB,MAAKrB,MAA9B,CAAxC,CAHQ;AAIbG,iBAAO,MAAKA,KAAL,IAAcM,UAAUa,KAAxB,IAAiC;AAJ3B,SAAf;;AAOA,YAAI;AACF,gBAAM,kBAAQC,GAAR,CAAYV,MAAZ,CAAN;AACA,gBAAM,MAAKW,cAAL,EAAN;AACD,SAHD,CAGE,OAAOC,GAAP,EAAY;AACZ;AACA,cAAI;AACF,mCAAM,CAAN,EAASA,IAAIC,QAAJ,CAAaC,IAAb,CAAkBC,MAA3B;AACD,WAFD,CAEE,OAAOC,QAAP,EAAiB;AACjB,mCAAM,CAAN,EAASA,SAASC,OAAlB;AACD;AACD;AACD;AACF;AA5CuB;AA6CzB;;AAEKN,gBAAN,GAAwB;AAAA;;AAAA;AACtB,YAAMO,eAAe,CAAC;AACpBC,cAAM,SADc;AAEpBpB,cAAM,SAFc;AAGpBkB,iBAAS,mBAAE,CAAF,EAAK,gCAAL,CAHW;AAIpBG,iBAAS;AAJW,OAAD,CAArB;;AAOA,YAAMP,WAAW,MAAM,mBAAShB,MAAT,CAAgBqB,YAAhB,CAAvB;AACA;;AAEA,UAAI,CAACL,SAASQ,OAAd,EAAuB;AACrB,8BAAK,CAAL,EAAS,sBAAqB,gBAAOC,IAAP,CAAa,4BAA2B,OAAKtC,WAAY,EAAzD,CAA4D,EAA1F;AACA;AACA,eAAOU,QAAQC,IAAR,EAAP;AACD;;AAED,gCAAgB,OAAKd,OAArB,EAA8BK,GAA9B,CAAkC,CAAC,OAAKF,WAAN,EAAmB,EAAEC,QAAQ,OAAKA,MAAL,GAAc,OAAKA,MAAL,CAAYc,IAA1B,GAAiC,IAA3C,EAAnB,CAAlC;AAjBsB;AAkBvB;;AAEDD,iBAAgB;AACd,UAAMyB,YAAY,CAAC;AACjBxB,YAAM,MADW;AAEjBkB,eAAS,mBAAE,CAAF,EAAK,oBAAL,CAFQ;AAGjBG,eAAS,SAHQ;AAIjBI,gBAAWC,KAAD,IAAW;AACnB,YAAI,CAACA,KAAL,EAAY;AACV,iBAAO,6BAAP;AACD;AACD,eAAO,IAAP;AACD;AATgB,KAAD,CAAlB;;AAYA,QAAI,CAAC,KAAKnC,KAAV,EAAiB;AACfiC,gBAAUG,IAAV,CAAe;AACb3B,cAAM,OADO;AAEbkB,iBAAS,mBAAE,CAAF,EAAK,mDAAL;AAFI,OAAf;AAID;AACD,QAAI,CAAC,KAAKd,cAAV,EAA0B;AACxBoB,gBAAUG,IAAV,CAAe;AACbP,cAAM,SADO;AAEbpB,cAAM,gBAFO;AAGbkB,iBAAS,mBAAE,CAAF,EAAK,oDAAL;AAHI,OAAf;AAKD;;AAED,WAAOM,SAAP;AACD;AAxGc;;kBA2GF5C,U","file":"hosting-add.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\nimport format from 'chalk'\nimport inquirer from 'inquirer'\nimport { p, echo, error } from '../utils/print-tools'\nimport HostingSync from './hosting-sync'\nimport Hosting from '../utils/hosting'\n\nclass HostingAdd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n    this.Socket = context.Socket\n    this.hostingName = null\n    this.socket = null\n  }\n\n  async run ([folder, cmd]) {\n    this.folder = folder\n    this.socketName = cmd.socket\n    this.cname = cmd.cname\n    this.fullPath = null\n\n    if (!fs.existsSync(this.folder)) {\n      echo()\n      error(4)('Provided path doesn\\'t exist.')\n      echo(4)(`Type ${format.green('mkdir <folder_name>')} to create a folder.`)\n      echo()\n      process.exit(1)\n    }\n\n    const responses = await inquirer.prompt(this.getQuestions()) || {}\n\n    this.hostingName = responses.name\n\n    if (this.socketName) {\n      // TODO: implement Socket level hosting\n      const params = {\n      }\n      this.socket = await this.Socket.get(cmd.socket || responses.socket)\n      this.socket.addHosting(this.hostingName, params)\n    } else {\n      const params = {\n        name: this.hostingName,\n        browser_router: responses.browser_router,\n        src: path.relative(this.session.projectPath, path.join(process.cwd(), this.folder)),\n        cname: this.cname || responses.CNAME || null\n      }\n\n      try {\n        await Hosting.add(params)\n        await this.syncNewHosting()\n      } catch (err) {\n        echo()\n        try {\n          error(4)(err.response.data.detail)\n        } catch (printErr) {\n          error(4)(printErr.message)\n        }\n        echo()\n      }\n    }\n  }\n\n  async syncNewHosting () {\n    const syncQuestion = [{\n      type: 'confirm',\n      name: 'confirm',\n      message: p(2)('Do you want to sync files now?'),\n      default: false\n    }]\n\n    const response = await inquirer.prompt(syncQuestion)\n    echo()\n\n    if (!response.confirm) {\n      echo(4)(`To sync files use: ${format.cyan(`syncano-cli hosting sync ${this.hostingName}`)}`)\n      echo()\n      return process.exit()\n    }\n\n    new HostingSync(this.context).run([this.hostingName, { socket: this.socket ? this.socket.name : null }])\n  }\n\n  getQuestions () {\n    const questions = [{\n      name: 'name',\n      message: p(2)(\"Set hosting's name\"),\n      default: 'staging',\n      validate: (value) => {\n        if (!value) {\n          return 'This parameter is required!'\n        }\n        return true\n      }\n    }]\n\n    if (!this.cname) {\n      questions.push({\n        name: 'CNAME',\n        message: p(2)('Set CNAME now (your own domain) or leave it empty')\n      })\n    }\n    if (!this.browser_router) {\n      questions.push({\n        type: 'confirm',\n        name: 'browser_router',\n        message: p(2)('Do you want to use BrowserRouter for this hosting?')\n      })\n    }\n\n    return questions\n  }\n}\n\nexport default HostingAdd\n"]}