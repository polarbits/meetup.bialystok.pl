{"version":3,"sources":["../../src/commands/socket-deploy.js"],"names":["debug","pendingUpdates","timer","SocketDeployCmd","constructor","context","session","Socket","registry","Registry","init","Init","firstRun","run","socketName","cmd","createInstance","addConfigFiles","instance","hasProject","msg","magenta","spinner","start","socketList","flatList","socket","find","name","stop","existLocally","isProjectRegistryDependency","isDependencySocket","cyan","process","exit","configs","each","socketFromList","config","getConfigOptionsToAsk","deployProject","index","deploySocket","err","response","data","detail","reset","status","grey","duration","getDuration","deployTimer","mainSpinner","updateStatus","update","withCompilation","updateSocketNPMDeps","updateEnv","printUpdateSuccessful","bail","red","traceback","split","map","line","join","message","getSocketToUpdate","fileName","localSockets","isSocketFile","dim","socketNameStr","errDetail","error"],"mappings":"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","file":"socket-deploy.js","sourcesContent":["import _ from 'lodash'\nimport format from 'chalk'\nimport Promise from 'bluebird'\n\nimport logger from '../utils/debug'\nimport { SimpleSpinner } from './helpers/spinner'\nimport { createInstance } from './helpers/create-instance'\nimport { askQuestions } from './helpers/socket'\nimport { p, error, echo } from '../utils/print-tools'\nimport { currentTime, Timer } from '../utils/date-utils'\nimport { CompileError } from '../utils/errors'\n\nconst { debug } = logger('cmd-socket-deploy')\n\nconst pendingUpdates = {}\nconst timer = new Timer()\n\nexport default class SocketDeployCmd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n    this.Socket = context.Socket\n    this.registry = new context.Registry()\n    this.init = new context.Init()\n    this.firstRun = true\n  }\n\n  async run ([socketName, cmd]) {\n    this.cmd = cmd\n\n    // echo(2)(`♻️ ${format.grey(' Deploying...')}`);\n\n    // Create Instance if --create-instance provided\n    if (cmd.createInstance) {\n      await createInstance(cmd.createInstance)\n      await this.init.addConfigFiles({ instance: cmd.createInstance })\n    } else {\n      // If not, we have to check if we have a project attached to any instance\n      this.session.hasProject()\n    }\n\n    if (socketName) {\n      debug(`Deploying Socket: ${socketName}`)\n      const msg = p(2)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      this.socketList = await this.Socket.flatList(socketName)\n      const socket = _.find(this.socketList, { name: socketName })\n      spinner.stop()\n\n      if (!(socket.existLocally || socket.isProjectRegistryDependency || socket.isDependencySocket)) {\n        echo()\n        error(4)(`Socket ${format.cyan(socketName)} cannot be found!`)\n        echo()\n        process.exit(1)\n      }\n    } else {\n      const msg = p(2)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      this.socketList = await this.Socket.flatList()\n      spinner.stop()\n    }\n\n    const configs = {}\n\n    try {\n      await Promise.each(this.socketList, async (socketFromList) => {\n        const config = await askQuestions(socketFromList.getConfigOptionsToAsk())\n        configs[socketFromList.name] = config\n      })\n      await this.deployProject()\n\n      let index\n      for (index in this.socketList) {\n        const socket = this.socketList[index]\n        await this.deploySocket(socket, configs[socket.name])\n      }\n\n      echo()\n    } catch (err) {\n      if (err.response && err.response.data && err.response.data.detail) {\n        error(4)(err.response.data.detail)\n      } else {\n        error(4)(err)\n      }\n      process.exit(1)\n    }\n  }\n\n  async deployProject () {\n    timer.reset()\n    const msg = p(4)(`${format.magenta('project deploy:')} ${currentTime()}`)\n    const spinner = new SimpleSpinner(msg).start()\n    await this.session.deployProject()\n    spinner.stop()\n    const status = format.grey('project synced:')\n    const duration = timer.getDuration()\n    echo(5)(`${status} ${currentTime()} ${duration}`)\n  }\n\n  async deploySocket (socket, config) {\n    debug(`deploySocket: ${socket.name}`)\n    const deployTimer = new Timer()\n    const msg = p(4)(`${format.magenta('socket deploy:')} ${currentTime()} ${format.cyan(socket.name)}`)\n    const spinner = new SimpleSpinner(msg).start()\n\n    // We have co count here updates\n    if (!pendingUpdates[socket.name]) { pendingUpdates[socket.name] = 0 }\n\n    pendingUpdates[socket.name] += 1\n    if (pendingUpdates[socket.name] > 1) {\n      spinner.stop()\n      this.mainSpinner.start()\n      debug(`not updating, update pending: ${pendingUpdates[socket.name]}`)\n      return\n    }\n\n    // Let's compile and update if it is not hot mode\n    try {\n      const updateStatus = await socket.update({ config, withCompilation: true, updateSocketNPMDeps: true, updateEnv: true })\n      spinner.stop()\n      SocketDeployCmd.printUpdateSuccessful(socket.name, updateStatus, deployTimer)\n      if (updateStatus.status !== 0 && this.cmd.bail) {\n        SocketDeployCmd.bail()\n      }\n    } catch (err) {\n      debug(err)\n      spinner.stop()\n      if (err instanceof CompileError) {\n        const status = format.red('    compile error:')\n        if (err.traceback) {\n          echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)}\\n\\n${err.traceback.split('\\n').map(line => p(8)(line)).join('\\n')}`)\n        } else {\n          echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)} Error while executing 'build' script!`)\n        }\n      } else {\n        const status = format.red('socket sync error:')\n        if (err.message) {\n          echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)} ${format.red(err.message)}`)\n        } else {\n          echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)}`)\n          error(err)\n        }\n      }\n\n      if (this.cmd.bail) {\n        SocketDeployCmd.bail()\n      }\n    }\n  }\n\n  getSocketToUpdate (fileName) {\n    return this.localSockets.find((socket) => socket.isSocketFile(fileName))\n  }\n\n  static bail () {\n    echo()\n    process.exit(1)\n  }\n\n  static printUpdateSuccessful (socketName, updateStatus, deployTimer) {\n    debug('printUpdateSuccessful', socketName, updateStatus)\n    const duration = format.dim(deployTimer.getDuration())\n    const socketNameStr = `${format.cyan(socketName)}`\n\n    if (updateStatus.status === 'ok') {\n      const status = format.grey('socket synced:')\n      echo(6)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    } else if (updateStatus.status === 'stopped') {\n      const status = format.grey('socket in sync:')\n      echo(5)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    } else if (updateStatus.status === 'error') {\n      const errDetail = format.red(updateStatus.message.error)\n      const status = format.red('socket not synced:')\n      echo(2)(`${status} ${currentTime()} ${socketNameStr} ${duration} ${errDetail}`)\n    } else {\n      const status = format.red('socket not synced:')\n      echo(2)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    }\n  }\n}\n"]}