{"version":3,"sources":["../../src/commands/hosting-files.js"],"names":["HostingFilesCmd","constructor","context","session","fillTable","files","table","forEach","file","push","path","hAlign","content","size","isSynced","green","red","isUpToDate","echoResponse","hostingName","filledTable","totalSize","length","cyan","toString","run","cmd","hosting","socket","get","attributes","name","process","exit","head","colWidths","style","chars","top","bottom","left","mid","right","middle","listFiles","sum","map"],"mappings":"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","file":"hosting-files.js","sourcesContent":["import _ from 'lodash'\nimport format from 'chalk'\nimport Table from 'cli-table2'\nimport prettyBytes from 'pretty-bytes'\nimport { echo, error, warning } from '../utils/print-tools'\nimport Hosting from '../utils/hosting'\n\nexport default class HostingFilesCmd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n  }\n\n  static fillTable (files, table) {\n    files.forEach((file) => {\n      table.push([\n        file.path,\n        { hAlign: 'right', content: prettyBytes(file.size) },\n        { hAlign: 'right', content: file.isSynced ? format.green('✓') : format.red('✗') },\n        { hAlign: 'right', content: file.isUpToDate ? format.green('✓') : format.red('✗') }\n      ])\n    })\n\n    return table\n  }\n\n  static echoResponse (hostingName, files, filledTable, totalSize) {\n    if (!files.length) {\n      return warning('There are no files in this hosting')\n    }\n\n    echo(4)(`Hosting ${format.cyan(hostingName)} has ${format.cyan(files.length)} files:`)\n    echo()\n    echo(filledTable.toString())\n    echo()\n    echo(4)(`You have ${files.length} files, ${format.cyan(prettyBytes(totalSize))} in total.`)\n    echo()\n  }\n\n  async run ([hostingName, cmd]) {\n    let hosting = null\n    if (cmd.socket) {\n      // TODO: implement Socket-based hosting\n    } else {\n      hosting = await Hosting.get(hostingName)\n    }\n\n    if (!hosting) {\n      error(`There are no hostings configured for the \"${this.attributes.name}\" socket!`)\n      process.exit()\n    }\n\n    const table = new Table({\n      head: ['path',\n        { hAlign: 'right', content: 'size' },\n        { hAlign: 'right', content: 'uploaded' },\n        { hAlign: 'right', content: 'up to date' }\n      ],\n      colWidths: [null, null, 15, 15],\n      style: { 'padding-left': 4, 'padding-right': 0 },\n      chars: {\n        top: '',\n        'top-mid': '',\n        'top-left': '',\n        'top-right': '',\n        bottom: '',\n        'bottom-mid': '',\n        'bottom-left': '',\n        'bottom-right': '',\n        left: '',\n        'left-mid': '',\n        mid: '',\n        'mid-mid': '',\n        right: '',\n        'right-mid': '',\n        middle: ' '\n      }\n    })\n\n    const files = await hosting.listFiles()\n    const totalSize = _.sum(_.map(files, 'size'))\n    const filledTable = HostingFilesCmd.fillTable(files, table)\n\n    HostingFilesCmd.echoResponse(hostingName, files, filledTable, totalSize)\n  }\n}\n"]}