{"version":3,"sources":["../../src/commands/attach.js"],"names":["debug","Attach","constructor","context","session","Init","run","cmd","init","project","confirmQuestion","type","name","message","default","confirm","prompt","process","exit","questions","getQuestions","instance","respInstanceName","trim","instanceName","createNewInstance","addConfigFiles","projectPath","load","randomName","createInstance","instances","getInstances","instancesNames","map","unshift","push","pageSize","choices"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;AACA;;;;;;;;AAEA,MAAM,EAAEA,KAAF,KAAY,qBAAO,YAAP,CAAlB;;AAEA,MAAMC,MAAN,CAAa;AACXC,cAAaC,OAAb,EAAsB;AACpBH,UAAM,oBAAN;AACA,SAAKI,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,IAAL,GAAYF,QAAQE,IAApB;AACD;;AAEKC,KAAN,CAAW,CAACC,MAAM,EAAP,CAAX,EAAuB;AAAA;;AAAA;AACrB,YAAKA,GAAL,GAAWA,GAAX;AACA,YAAKC,IAAL,GAAY,IAAI,MAAKH,IAAT,EAAZ;;AAEA,UAAI,MAAKD,OAAL,CAAaK,OAAjB,EAA0B;AACxB,cAAMC,kBAAkB,CAAC;AACvBC,gBAAM,SADiB;AAEvBC,gBAAM,SAFiB;AAGvBC,mBAAS,mBAAE,CAAF,EAAK,6EAAL,CAHc;AAIvBC,mBAAS;AAJc,SAAD,CAAxB;;AAOA,cAAM,EAAEC,OAAF,KAAc,OAAM,mBAASC,MAAT,CAAgBN,eAAhB,CAAN,KAA0C,EAA9D;AACA,YAAIK,YAAY,KAAhB,EAAuB,OAAOE,QAAQC,IAAR,EAAP;AACxB;;AAED,YAAMC,YAAY,MAAM,MAAKC,YAAL,EAAxB;AACA,YAAM,EAAEC,QAAF,KAAe,OAAM,mBAASL,MAAT,CAAgBG,SAAhB,CAAN,KAAoC,EAAzD;;AAEA,YAAMG,mBAAmBD,YAAYA,aAAa,mBAAE,CAAF,EAAK,qBAAL,CAAzB,GAAuDA,SAASE,IAAT,EAAvD,GAAyE,IAAlG;AACA,UAAIC,eAAejB,IAAIc,QAAJ,IAAgBC,gBAAnC;;AAEA,UAAI,CAACE,YAAL,EAAmB;AACjBA,uBAAe,MAAM,MAAKC,iBAAL,EAArB;AACD;;AAED,YAAM,MAAKjB,IAAL,CAAUkB,cAAV,CAAyB,EAAEL,UAAUG,YAAZ,EAAzB,EAAqD,MAAKpB,OAAL,CAAauB,WAAlE,CAAN;;AAEA;AACA,aAAO,MAAKvB,OAAL,CAAawB,IAAb,EAAP;AA7BqB;AA8BtB;;AAEKH,mBAAN,GAA2B;AAAA;;AAAA;AACzB,YAAMI,aAAa,+BAAnB;AACA,YAAM,EAAEL,YAAF,KAAmB,MAAM,mBAASR,MAAT,CAAgB,CAC7C;AACEJ,cAAM,cADR;AAEED,cAAM,OAFR;AAGEG,iBAASe,UAHX;AAIEhB,iBAAS,mBAAE,CAAF,EAAK,wCAAL;AAJX,OAD6C,CAAhB,CAA/B;;AASA,YAAMQ,WAAW,MAAM,OAAKjB,OAAL,CAAa0B,cAAb,CAA4BN,YAA5B,CAAvB;;AAEA,aAAOH,SAAST,IAAhB;AAbyB;AAc1B;;AAEKQ,cAAN,GAAsB;AAAA;;AAAA;AACpBpB,YAAM,cAAN;AACA,YAAMmB,YAAY,EAAlB;;AAEA,UAAI,CAAC,OAAKZ,GAAL,CAASc,QAAd,EAAwB;AACtB,cAAMU,YAAY,MAAM,OAAK3B,OAAL,CAAa4B,YAAb,EAAxB;AACA,cAAMC,iBAAiBF,UAAUG,GAAV,CAAc,UAACb,QAAD;AAAA,iBAAc,mBAAE,CAAF,EAAKA,SAAST,IAAd,CAAd;AAAA,SAAd,CAAvB;AACAqB,uBAAeE,OAAf,CAAuB,mBAAE,CAAF,EAAK,qBAAL,CAAvB;;AAEAhB,kBAAUiB,IAAV,CAAe;AACbxB,gBAAM,UADO;AAEbD,gBAAM,MAFO;AAGb0B,oBAAU,EAHG;AAIbxB,mBAAS,mBAAE,CAAF,EAAK,mCAAL,CAJI;AAKbyB,mBAASL,cALI;AAMbnB,mBAAS;AANI,SAAf;AAQD;;AAED,aAAOK,SAAP;AAnBoB;AAoBrB;AA3EU;;kBA8EElB,M","file":"attach.js","sourcesContent":["import inquirer from 'inquirer'\n\nimport logger from '../utils/debug'\nimport { p, echo } from '../utils/print-tools'\nimport genUniqueInstanceName from '../utils/unique-instance'\n\nconst { debug } = logger('cmd-attach')\n\nclass Attach {\n  constructor (context) {\n    debug('Attach.constructor')\n    this.session = context.session\n    this.Init = context.Init\n  }\n\n  async run ([cmd = {}]) {\n    this.cmd = cmd\n    this.init = new this.Init()\n\n    if (this.session.project) {\n      const confirmQuestion = [{\n        type: 'confirm',\n        name: 'confirm',\n        message: p(2)('This project is already attached. Are you sure you want to change instance?'),\n        default: false\n      }]\n\n      const { confirm } = await inquirer.prompt(confirmQuestion) || {}\n      if (confirm === false) return process.exit()\n    }\n\n    const questions = await this.getQuestions()\n    const { instance } = await inquirer.prompt(questions) || {}\n\n    const respInstanceName = instance && instance !== p(2)('Create a new one...') ? instance.trim() : null\n    let instanceName = cmd.instance || respInstanceName\n\n    if (!instanceName) {\n      instanceName = await this.createNewInstance()\n    }\n\n    await this.init.addConfigFiles({ instance: instanceName }, this.session.projectPath)\n\n    echo()\n    return this.session.load()\n  }\n\n  async createNewInstance () {\n    const randomName = genUniqueInstanceName()\n    const { instanceName } = await inquirer.prompt([\n      {\n        name: 'instanceName',\n        type: 'input',\n        default: randomName,\n        message: p(2)('Choose instance name for your project:')\n      }\n    ])\n\n    const instance = await this.session.createInstance(instanceName)\n\n    return instance.name\n  }\n\n  async getQuestions () {\n    debug('getQuestions')\n    const questions = []\n\n    if (!this.cmd.instance) {\n      const instances = await this.session.getInstances()\n      const instancesNames = instances.map((instance) => p(2)(instance.name))\n      instancesNames.unshift(p(2)('Create a new one...'))\n\n      questions.push({\n        name: 'instance',\n        type: 'list',\n        pageSize: 16,\n        message: p(2)('Choose instance for your project:'),\n        choices: instancesNames,\n        default: 0\n      })\n    }\n\n    return questions\n  }\n}\n\nexport default Attach\n"]}