'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Session = undefined;

var _core = require('@syncano/core');

var _core2 = _interopRequireDefault(_core);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _nodeWalkup = require('node-walkup');

var _nodeWalkup2 = _interopRequireDefault(_nodeWalkup);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

var _debug = require('./debug');

var _debug2 = _interopRequireDefault(_debug);

var _package = require('../../package.json');

var _package2 = _interopRequireDefault(_package);

var _settings = require('../settings');

var _settings2 = _interopRequireDefault(_settings);

var _uniqueInstance = require('./unique-instance');

var _uniqueInstance2 = _interopRequireDefault(_uniqueInstance);

var _sockets = require('./sockets');

var _sockets2 = _interopRequireDefault(_sockets);

var _init = require('./init');

var _init2 = _interopRequireDefault(_init);

var _hosting = require('./hosting');

var _hosting2 = _interopRequireDefault(_hosting);

var _plugins = require('./plugins');

var _plugins2 = _interopRequireDefault(_plugins);

var _printTools = require('./print-tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new _bluebird2.default(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return _bluebird2.default.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { debug } = (0, _debug2.default)('utils-session');

class Session {
  constructor() {
    this.settings = null;
    this.projectPath = null;
    this.project = null;
    this.userId = null;
    this.walkup = _bluebird2.default.promisify(_nodeWalkup2.default);

    this.majorVersion = _package2.default.version.split('.')[0];

    this.HOST = process.env.SYNCANO_HOST || 'api.syncano.io';
    this.ENDPOINT_HOST = this.HOST === 'api.syncano.io' ? 'syncano.space' : 'syncano.link';
  }

  getSpaceHost() {
    if (this.project && this.project.instance) {
      return `${this.project.instance}.${this.ENDPOINT_HOST}`;
    }
  }

  getInitInstance() {
    return new _init2.default(this);
  }

  getPluginsInstance() {
    return new _plugins2.default(this);
  }

  getBaseURL() {
    return `https://${this.getHost()}`;
  }

  getHost() {
    return this.HOST;
  }

  getDistPath() {
    let distPath = '.dist';
    if (this.projectPath) {
      distPath = _path2.default.join(this.projectPath, '.dist');
    }
    _mkdirp2.default.sync(distPath);
    return distPath;
  }

  getBuildPath() {
    const buildPath = _path2.default.join(this.projectPath, '.build');
    _mkdirp2.default.sync(buildPath);
    return buildPath;
  }

  getAnonymousConnection() {
    return new _core2.default({
      meta: {
        'api_host': this.getHost()
      }
    });
  }

  createConnection() {
    var _this = this;

    return _asyncToGenerator(function* () {
      debug('createConnection');
      if (_this.settings.account.authenticated()) {
        debug('user is authenticated');
        _this.connection = new _core2.default({
          accountKey: _this.settings.account.getAuthKey(),
          meta: {
            'api_host': _this.getHost()
          }
        });

        if (_this.project && _this.project.instance) {
          _this.connection = new _core2.default({
            instanceName: _this.project.instance,
            accountKey: _this.settings.account.getAuthKey(),
            meta: {
              'api_host': _this.getHost()
            }
          });
        }
      } else {
        _this.connection = _this.getAnonymousConnection();
      }

      try {
        const details = yield _this.connection.account.get(_this.settings.account.getAuthKey());
        _this.userId = details.id;
      } catch (err) {}
    })();
  }

  deleteInstance(name) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      return _this2.connection.instance.delete(name);
    })();
  }

  createInstance(name = (0, _uniqueInstance2.default)()) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      return _this3.connection.instance.create({ name });
    })();
  }

  getInstance(instanceName) {
    var _this4 = this;

    return _asyncToGenerator(function* () {
      const instanceNameToGet = instanceName || _this4.project && _this4.project.instance;
      return _this4.connection.instance.get(instanceNameToGet);
    })();
  }

  getInstances() {
    var _this5 = this;

    return _asyncToGenerator(function* () {
      return _this5.connection.instance.list();
    })();
  }

  checkAuth() {
    var _this6 = this;

    return _asyncToGenerator(function* () {
      const userDetails = yield _this6.connection.Account.getUserDetails();
      return new _bluebird2.default(function (resolve, reject) {
        if (userDetails) {
          return resolve(userDetails);
        }
        reject(new Error('No such user!'));
      });
    })();
  }

  static findProjectPath() {
    return new _bluebird2.default((resolve, reject) => {
      if (_fs2.default.existsSync('syncano.yml')) {
        return resolve(process.cwd());
      }
      if (_fs2.default.existsSync('syncano/syncano.yml')) {
        return resolve(_path2.default.join(process.cwd(), 'syncano'));
      }

      const searchInPath = pathToCheck => {
        if (pathToCheck === process.env.HOME || pathToCheck === '/') {
          return reject(new Error('No more folders to check'));
        }

        let files = null;
        try {
          files = _fs2.default.readdirSync(pathToCheck);
        } catch (err) {
          return reject(new Error(`Path ${pathToCheck} can not be read`));
        }

        if (_lodash2.default.includes(files, 'syncano.yml')) {
          return resolve(pathToCheck);
        }

        const nextFolder = _path2.default.parse(pathToCheck);
        if (nextFolder.name) {
          searchInPath(nextFolder.dir);
        } else {
          return reject(new Error('No more folders to check'));
        }
      };

      searchInPath(process.cwd());
    });
  }

  load() {
    var _this7 = this;

    return _asyncToGenerator(function* () {
      debug('load');

      // Checking all folders up
      try {
        const projectPath = yield Session.findProjectPath();
        debug('Searching for syncano.yml', projectPath);
        _this7.projectPath = projectPath;
        _this7.settings = (0, _settings2.default)(projectPath);
        _this7.project = _this7.settings.account.getProject(_this7.projectPath);
      } catch (err) {
        _this7.settings = (0, _settings2.default)();
      }
      yield _this7.createConnection();
      return _this7;
    })();
  }

  loadPlugins(program, context) {
    new _plugins2.default(this).load(program, context);
  }

  isAuthenticated() {
    if (!this.settings.account.authenticated()) {
      (0, _printTools.echo)();
      (0, _printTools.echo)(4)('You are not logged in!');
      (0, _printTools.echo)(4)(`Type ${_chalk2.default.cyan('syncano-cli login')} for login to your account.`);
      (0, _printTools.echo)();
      process.exit(1);
    }
  }

  isAuthenticatedToInit() {
    if (!this.settings.account.authenticated()) {
      (0, _printTools.echo)();
      (0, _printTools.echo)(4)(_chalk2.default.red('You have to be a logged in to be able an initialize a new project!'));
      (0, _printTools.echo)();
    }
  }

  checkConnection(instanceName) {
    var _this8 = this;

    return _asyncToGenerator(function* () {
      const instance = yield _this8.getInstance(instanceName);
      if (!instance) {
        (0, _printTools.echo)();
        (0, _printTools.echo)(4)(`Instance ${_chalk2.default.cyan(instanceName || _this8.project.instance)} was not found on your account!`);
        (0, _printTools.echo)();

        if (instanceName) return process.exit();

        (0, _printTools.echo)(4)(`Type ${_chalk2.default.cyan('syncano-cli attach')} to choose one of the existing instances.`);
        (0, _printTools.echo)();

        return process.exit();
      }

      return instance;
    })();
  }

  hasProject() {
    this.hasProjectPath();

    if (!this.project) {
      (0, _printTools.echo)();
      (0, _printTools.echo)(4)('You have to attach this project to one of your instances.');
      (0, _printTools.echo)(4)(`Try ${_chalk2.default.cyan('syncano-cli attach')}.`);
      (0, _printTools.echo)();
      process.exit();
    }
  }

  hasProjectPath() {
    if (!this.projectPath) {
      (0, _printTools.echo)();
      (0, _printTools.echo)(4)(`I don't see any project here. Try ${_chalk2.default.cyan('syncano-cli init')}.`);
      (0, _printTools.echo)();
      process.exit();
    }
  }

  hasSocket(socketName) {
    // eslint-disable-line class-methods-use-this
    const socket = new _sockets2.default(socketName);
    if (!socket.existLocally) {
      (0, _printTools.echo)();
      (0, _printTools.echo)(4)('File socket.yml was not found in a project directory!');
      (0, _printTools.echo)(4)(`Check your directory or try ${_chalk2.default.cyan('syncano-cli create')} to create a new Socket.`);
      (0, _printTools.echo)();
      process.exit();
    }
  }

  notAlreadyInitialized() {
    if (this.projectPath && this.project) {
      (0, _printTools.echo)();
      (0, _printTools.echo)(4)('You are fine! Project in this folder is already initiated!');
      (0, _printTools.echo)(4)(`It is using ${_chalk2.default.cyan(this.project.instance)} Syncano instance.`);
      (0, _printTools.echo)();
      process.exit();
    }
  }

  deployProject() {
    return _asyncToGenerator(function* () {
      // eslint-disable-line class-methods-use-this
      const hostings = yield _hosting2.default.list();
      return _bluebird2.default.all(hostings.map(function (hosting) {
        return hosting.deploy();
      }));
    })();
  }
}

exports.Session = Session;
exports.default = new Session();
//# sourceMappingURL=session.js.map