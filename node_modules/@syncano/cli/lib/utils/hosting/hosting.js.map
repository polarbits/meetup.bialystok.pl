{"version":3,"sources":["../../../src/utils/hosting/hosting.js"],"names":["debug","HostingFile","loadRemote","fileRemoteData","id","instanceName","path","checksum","size","loadLocal","fileLocalData","localPath","basename","readFileSync","statSync","Hosting","constructor","hostingName","socket","name","existRemotely","existLocally","hostingURL","project","instance","editHostingURL","getHost","hostingHost","config","add","params","configParams","src","browser_router","settings","addHosting","addHostingURL","domains","cname","push","paramsToAdd","response","request","url","method","data","headers","account","getAuthKey","hasCNAME","indexOf","configure","removeCNAME","cnameToRemoveIndex","splice","paramsToUpdate","setRemoteState","deploy","delete","deleteHosting","get","hosting","listLocal","listHosting","listFromProject","list","projectHostings","promises","map","all","getDirectories","excluded","notExcluded","dirname","startsWith","readdirSync","process","cwd","filter","file","dirs","isDirectory","find","description","isUpToDate","areFilesUpToDate","error","resolve","getRemote","err","localHostingSettings","loaded","getHosting","Object","keys","length","join","projectPath","sep","getURL","getLocalFilePath","replace","getFilesToUpload","remoteFiles","localHostingFilePath","fileToUpdate","payload","append","createReadStream","singleFile","remoteChecksum","localChecksum","connection","getFile","green","dim","updateFile","uploadFile","generateUploadFilesResult","result","red","prettyUploadSize","uploadedSize","cyan","uploadedFilesCount","uploadFiles","files","localFiles","listLocalFiles","forEach","values","upload","syncFiles","existsSync","Error","bold","listRemoteFiles","localChecksums","localFile","filePath","remoteChecksums","remoteFile","isEqual","sortBy","listFiles","hostingFile","localHostingFiles","Array","isArray","remoteCopy","isSynced","extend","getCNAME","domain","getCnameURL","listRemote","hostings","default"],"mappings":"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","file":"hosting.js","sourcesContent":["import fs from 'fs'\nimport FormData from 'form-data'\nimport format from 'chalk'\nimport path from 'path'\nimport prettyBytes from 'pretty-bytes'\nimport _ from 'lodash'\nimport Promise from 'bluebird'\nimport md5 from 'md5'\nimport axios from 'axios'\n\nimport session from '../session'\nimport logger from '../debug'\nimport { getFiles } from './utils'\nimport { echo, error } from '../../utils/print-tools'\n\nconst { debug } = logger('utils-hosting')\n\nclass HostingFile {\n  loadRemote (fileRemoteData) {\n    this.id = fileRemoteData.id\n    this.instanceName = fileRemoteData.instanceName\n    this.path = fileRemoteData.path\n    this.checksum = fileRemoteData.checksum\n    this.size = fileRemoteData.size\n    return this\n  }\n  loadLocal (fileLocalData) {\n    this.localPath = fileLocalData.path\n    this.path = path.basename(this.localPath)\n    this.checksum = md5(fs.readFileSync(this.localPath))\n    this.size = fs.statSync(this.localPath).size\n    return this\n  }\n}\n\nclass Hosting {\n  constructor (hostingName, socket) {\n    debug('Hosting.constructor', hostingName, socket)\n\n    this.name = hostingName\n    this.socket = socket || null\n    this.path = null\n\n    this.existRemotely = null\n    this.existLocally = null\n\n    this.hostingURL = `/v2/instances/${session.project.instance}/hosting/`\n    this.editHostingURL = `https://${session.getHost()}${this.hostingURL}${this.name}/`\n    this.hostingHost = session.getHost() === 'api.syncano.rocks' ? 'syncano.ninja' : 'syncano.site'\n    this.config = {}\n\n    this.loadLocal()\n  }\n\n  static async add (params) {\n    const configParams = {\n      src: params.src,\n      config: {\n        browser_router: params.browser_router || false\n      }\n    }\n    session.settings.project.addHosting(params.name, configParams)\n\n    const hostingURL = `/v2/instances/${session.project.instance}/hosting/`\n    const addHostingURL = `https://${session.getHost()}${hostingURL}`\n\n    const domains = [params.name]\n    if (params.cname) {\n      domains.push(params.cname)\n    }\n\n    const paramsToAdd = {\n      name: params.name,\n      config: {\n        browser_router: params.browser_router\n      },\n      domains\n    }\n\n    const response = await axios.request({\n      url: addHostingURL,\n      method: 'POST',\n      data: paramsToAdd,\n      headers: {\n        'X-Api-Key': session.settings.account.getAuthKey()\n      }\n    })\n    return response.data\n  }\n\n  hasCNAME (cname) {\n    return this.domains.indexOf(cname) > -1\n  }\n\n  async configure (params) {\n    const domains = this.domains\n    if (params.cname && this.domains.indexOf(params.cname) < 0) {\n      domains.push(params.cname)\n    }\n\n    if (params.removeCNAME) {\n      const cnameToRemoveIndex = domains.indexOf(params.removeCNAME)\n      if (cnameToRemoveIndex > -1) {\n        domains.splice(cnameToRemoveIndex, 1)\n      }\n    }\n\n    const paramsToUpdate = {\n      name: this.name,\n      config: {\n        browser_router: params.browser_router\n      },\n      domains\n    }\n\n    const response = await axios.request({\n      url: this.editHostingURL,\n      method: 'PATCH',\n      data: paramsToUpdate,\n      headers: {\n        'X-Api-Key': session.settings.account.getAuthKey()\n      }\n    })\n\n    return this.setRemoteState(response.data)\n  }\n\n  async deploy () {\n    debug('deploy')\n\n    if (!this.existRemotely) {\n      debug('adding hosting')\n      return Hosting.add({\n        name: this.name,\n        src: this.src\n      })\n    }\n\n    debug('patching hosting')\n    // TODO: not optimal\n    const paramsToUpdate = {\n      name: this.name,\n      domains: this.domains\n    }\n\n    const response = await axios.request({\n      url: this.editHostingURL,\n      method: 'PATCH',\n      data: paramsToUpdate,\n      headers: {\n        'X-Api-Key': session.settings.account.getAuthKey()\n      }\n    })\n\n    return this.setRemoteState(response.data)\n  }\n\n  async delete () {\n    if (!this.socket) {\n      await axios.request({\n        url: this.editHostingURL,\n        method: 'DELETE',\n        headers: {\n          'X-Api-Key': session.settings.account.getAuthKey()\n        }\n      })\n      session.settings.project.deleteHosting(this.name)\n      return this\n    }\n  }\n\n  static get (hostingName, socket) {\n    debug(`get ${hostingName}`)\n    const hosting = new Hosting(hostingName, socket)\n    return hosting.loadRemote()\n  }\n\n  static listLocal (socket) {\n    return socket.settings.listHosting()\n  }\n\n  static listFromProject () {\n    return session.settings.project.listHosting()\n  }\n\n  // list all hostings (mix of locally definde and installed on server)\n  static async list (socket) {\n    debug('list()')\n    // const localHostings = Hosting.listLocal(socket);\n    if (!socket) {\n      const projectHostings = Hosting.listFromProject()\n      debug('projectHostings', projectHostings)\n      const promises = projectHostings.map((hosting) => Hosting.get(hosting.name))\n      return Promise.all(promises)\n    }\n  }\n\n  static getDirectories () {\n    const excluded = ['node_modules', 'src', 'syncano']\n\n    function notExcluded (dirname) {\n      if (dirname.startsWith('.')) {\n        return\n      }\n      if (excluded.indexOf(dirname) !== -1) {\n        return\n      }\n      return dirname\n    }\n\n    return fs.readdirSync(process.cwd()).filter((file) => {\n      const dirs = []\n      if (fs.statSync(`${process.cwd()}/${file}`).isDirectory()) {\n        dirs.push(file)\n      }\n      return dirs.find(notExcluded)\n    })\n  }\n\n  async setRemoteState (hosting) {\n    debug('setRemoteState', hosting.name)\n    if (hosting && typeof hosting === 'object') {\n      this.existRemotely = true\n      this.name = hosting.name\n      this.description = hosting.description\n      this.domains = hosting.domains\n      this.config.browser_router = hosting.config.browser_router || false\n      this.isUpToDate = await this.areFilesUpToDate()\n    } else {\n      this.existRemotely = false\n      this.error = hosting\n    }\n    return Promise.resolve()\n  }\n\n  async loadRemote () {\n    debug('loadRemote()')\n    try {\n      const hosting = await this.getRemote()\n      await this.setRemoteState(hosting)\n    } catch (err) {\n      this.existRemotely = false\n    }\n    return this\n  }\n\n  loadLocal () {\n    debug('loadLocal()')\n    let localHostingSettings = {}\n    if (this.socket) {\n      if (this.socket.settings.loaded) {\n        localHostingSettings = this.socket.settings.getHosting(this.name)\n      }\n    } else {\n      localHostingSettings = session.settings.project.getHosting(this.name)\n    }\n\n    if (!localHostingSettings) {\n      return\n    }\n\n    if (Object.keys(localHostingSettings).length > 0) {\n      this.existLocally = true\n      this.src = localHostingSettings.src\n      this.cname = localHostingSettings.cname\n      this.path = path.join(session.projectPath, this.src, path.sep)\n      this.url = this.getURL(this.name)\n\n      if (localHostingSettings.config && localHostingSettings.config.browser_router) {\n        this.config.browser_router = localHostingSettings.config.browser_router\n      }\n    }\n  }\n\n  getURL () {\n    return `https://${this.name}--${session.project.instance}.${this.hostingHost}`\n  }\n\n  getLocalFilePath (file) {\n    debug('getLocalFilePath')\n    if (!file) return null\n    return file.localPath.replace(this.path, '')\n  }\n\n  // Verify local file if it should be created or updated\n  async getFilesToUpload (file, remoteFiles) {\n    debug('getFilesToUpload')\n    const localHostingFilePath = this.getLocalFilePath(file)\n    const fileToUpdate = _.find(remoteFiles, { path: localHostingFilePath })\n    const payload = new FormData()\n    payload.append('file', fs.createReadStream(file.localPath))\n    payload.append('path', localHostingFilePath)\n\n    let singleFile = null\n\n    if (fileToUpdate) {\n      const remoteChecksum = fileToUpdate.checksum\n      const localChecksum = file.checksum\n\n      // Check if checksum of the local file is the same as remote one\n      if (remoteChecksum === localChecksum) {\n        try {\n          singleFile = await session.connection.hosting.getFile(this.name, fileToUpdate.id)\n          echo(6)(`${format.green('✓')} File skipped: ${format.dim(localHostingFilePath)}`)\n        } catch (err) {\n          error(err)\n        }\n      } else {\n        try {\n          singleFile = await session.connection.hosting.updateFile(this.name, fileToUpdate.id, payload)\n          echo(6)(`${format.green('✓')} File updated: ${format.dim(localHostingFilePath)}`)\n        } catch (err) {\n          echo(`Error while syncing (updating) ${localHostingFilePath}`)\n          debug(err.response.data)\n        }\n      }\n    } else {\n      // Adding (first upload) file\n      try {\n        singleFile = await session.connection.hosting.uploadFile(this.name, payload)\n        echo(6)(`${format.green('✓')} File added:   ${format.dim(localHostingFilePath)}`)\n      } catch (err) {\n        echo(`Error while syncing (creating) ${file.path}`)\n        debug(err.response.data)\n      }\n    }\n\n    return singleFile\n  }\n\n  // Files upload report\n  generateUploadFilesResult (result) {\n    if (!result) {\n      return `\\n\\t${format.red('No files synchronized!')}\\n`\n    }\n    const prettyUploadSize = prettyBytes(result.uploadedSize)\n\n    return `\\n\\t${format.cyan(result.uploadedFilesCount)} files synchronized, ${format.cyan(prettyUploadSize)} in total\n    \\t${format.green(this.name)} is available at: ${format.green(this.getURL())}\\n`\n  }\n\n  async uploadFiles (files) {\n    let uploadedFilesCount = 0\n    let uploadedSize = 0\n    const promises = []\n\n    const localFiles = await this.listLocalFiles()\n\n    await localFiles.forEach(file => {\n      promises.push(this.getFilesToUpload(file, files))\n    })\n\n    const values = await Promise.all(promises)\n    uploadedFilesCount = 0\n    uploadedSize = 0\n    values.forEach(upload => {\n      uploadedFilesCount += 1\n      uploadedSize += upload.size\n    })\n    return { uploadedFilesCount, uploadedSize }\n  }\n\n  // Run this to synchronize hosted files\n  // first we are getting remote files\n  async syncFiles () {\n    debug('syncFiles()')\n\n    if (!fs.existsSync(this.path)) {\n      throw new Error(`Local folder ${format.bold(this.path)} doesn't exist!`)\n    }\n\n    const remoteFiles = await this.listRemoteFiles()\n    const result = await this.uploadFiles(remoteFiles)\n    return this.generateUploadFilesResult(result)\n  }\n\n  async areFilesUpToDate () {\n    debug('areFilesUpToDate()')\n\n    // Check if local folder exist\n    if (!fs.existsSync(this.path)) {\n      return false\n    }\n\n    const localChecksums = await this.listLocalFiles().map((localFile) => ({\n      filePath: this.getLocalFilePath(localFile),\n      checksum: localFile.checksum\n    }))\n\n    const remoteChecksums = await this.listRemoteFiles().map((remoteFile) => ({\n      filePath: remoteFile.path,\n      checksum: remoteFile.checksum\n    }))\n\n    return _.isEqual(_.sortBy(localChecksums, 'filePath'), _.sortBy(remoteChecksums, 'filePath'))\n  }\n\n  // Get list of the hostings first, then get the files list for given one\n  async listRemoteFiles () {\n    debug('listRemoteFiles()')\n    const files = await session.connection.hosting.listFiles(this.name)\n    return Promise.all(files.map(async file => {\n      const hostingFile = new HostingFile(file)\n      return hostingFile.loadRemote(file)\n    }))\n  }\n\n  // Get info about hostings first, then get the files list for given one\n  async listLocalFiles () {\n    debug('listLocalFiles')\n    const localHostingFiles = this.path ? await getFiles(this.path) : []\n    if (!Array.isArray(localHostingFiles)) return localHostingFiles\n\n    return localHostingFiles ? localHostingFiles.map((file) => new HostingFile().loadLocal({ path: file })) : []\n  }\n\n  async listFiles () {\n    const remoteFiles = await this.listRemoteFiles()\n    const listLocalFiles = await this.listLocalFiles()\n\n    const files = []\n    listLocalFiles.forEach((localFile) => {\n      const file = localFile\n      const remoteCopy = _.find(remoteFiles, { path: this.getLocalFilePath(file) })\n\n      if (remoteCopy) {\n        file.isUpToDate = file.checksum === remoteCopy.checksum\n        file.isSynced = true\n        _.extend(file, remoteCopy)\n      }\n      files.push(file)\n    })\n    return files\n  }\n\n  getCNAME () {\n    return _.find(this.domains, (domain) => domain.indexOf('.') !== -1)\n  }\n\n  getCnameURL () {\n    const cname = this.getCNAME()\n    if (cname) {\n      return `http://${cname}`\n    }\n  }\n\n  // TODO: filtering hostings (wating for core)\n  static async listRemote (socket) {\n    debug('listRemote')\n    const hostings = await session.connection.hosting.list()\n    return hostings.map((hosting) => new Hosting(hosting.name, socket))\n  }\n\n  getRemote () {\n    debug('getRemote()', this)\n    return session.connection.hosting.get(this.name)\n  }\n}\n\nexport { Hosting as default, HostingFile }\n"]}