{"version":3,"sources":["../../src/utils/print-tools.js"],"names":["MAP","cyan","dim","green","yellow","magenta","red","getFormatMethod","code","firstDigitOfCode","toString","printCode","str","printSourceCode","contentType","source","object","JSON","parse","inspect","depth","colors","echo","args","Number","isInteger","padding","nextArgs","process","stdout","write","format","repeat","join","echon","error","length","warning","p","string","split"],"mappings":"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","file":"print-tools.js","sourcesContent":["import _ from 'lodash'\nimport format from 'chalk'\nimport util from 'util'\n\nconst MAP = {\n  0: format.cyan.dim, // default value\n  1: format.cyan.dim,\n  2: format.green.dim,\n  3: format.yellow.dim,\n  4: format.magenta.dim,\n  5: format.red.dim\n}\n\nfunction getFormatMethod (code) {\n  const firstDigitOfCode = code.toString()[0]\n\n  return MAP[firstDigitOfCode] || MAP[0]\n}\n\nfunction printCode (code, str) {\n  return getFormatMethod(code)(str || code)\n}\n\nfunction printSourceCode (contentType, source) {\n  if (contentType === 'application/json') {\n    const object = JSON.parse(source)\n    return util.inspect(object, { depth: null, colors: true })\n  }\n  return source.toString()\n}\n\nfunction echo (...args) {\n  if (Number.isInteger(args[0])) {\n    const padding = args[0]\n    return (...nextArgs) => {\n      process.stdout.write(`${util.format(_.repeat(' ', padding) + nextArgs.join(' '))} \\n`)\n    }\n  }\n  process.stdout.write(`${util.format(args.join(' '))} \\n`)\n}\n\nfunction echon (...args) {\n  if (Number.isInteger(args[0])) {\n    const padding = args[0]\n    return (...nextArgs) => {\n      process.stdout.write(`${util.format(_.repeat(' ', padding) + nextArgs.join(' '))}`)\n    }\n  }\n  process.stdout.write(`${util.format(args.join(' '))}`)\n}\n\nfunction error (...args) {\n  if (args.length === 1 && !Number.isInteger(args[0])) {\n    // args.unshift('ERROR:');\n    process.stdout.write(util.format(format.red(args.join(' '), '\\n')))\n    return\n  }\n\n  if (Number.isInteger(args[0])) {\n    const padding = args[0]\n    return (...nextArgs) => {\n      process.stdout.write(util.format(_.repeat(' ', padding) + format.red(nextArgs.join(' '), '\\n')))\n    }\n  }\n\n  process.stdout.write(util.format(format.red(args.join('\\n\\n'), '\\n')))\n}\n\nfunction warning (...args) {\n  if (args.length === 1 && !Number.isInteger(args[0])) {\n    process.stdout.write(util.format(format.yellow(args.join(' '), '\\n')))\n    return\n  }\n\n  if (Number.isInteger(args[0])) {\n    const padding = args[0]\n    return (...nextArgs) => {\n      process.stdout.write(util.format(_.repeat(' ', padding) + format.yellow(nextArgs.join(' '), '\\n')))\n    }\n  }\n\n  process.stdout.write(util.format(format.yellow(args.join('\\n\\n'), '\\n')))\n}\n\nconst p = (padding) => (string) => {\n  let str = ''\n  if (string) {\n    str = string.split('\\n').join(`\\n${_.repeat(' ', padding)}`)\n  }\n  return _.repeat(' ', padding) + str\n}\n\nexport default {\n  MAP,\n  getFormatMethod,\n  printCode,\n  printSourceCode,\n  echo,\n  echon,\n  error,\n  warning,\n  p\n}\n"]}