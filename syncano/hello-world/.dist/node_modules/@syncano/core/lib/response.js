'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _lodash = require('lodash.get');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Unified response helper
 * @property {Function}
 */

class Response {
  constructor(instance, content = null, status = 200, mimetype = 'text/plain', headers = {}) {
    this._content = content;
    this._status = status;
    this._mimetype = mimetype;
    this._headers = headers;

    let setResponse = instance.setResponse || global.setResponse;
    let HttpResponse = instance.HttpResponse || global.HttpResponse;

    const args = [this._status, this._content, this._mimetype, this._headers];

    if (setResponse === undefined) {
      return;
    }

    setResponse(new HttpResponse(...args));
  }
}

exports.default = config => {
  const response = (content, status, mimetype, headers) => new Response(config, content, status, mimetype, headers);

  const responses = (0, _lodash2.default)(config, 'meta.metadata.response', {});

  mapYamlResponsesToMethods(response, responses, config);

  response.header = (key, value) => {
    response._headers = _extends({}, response._headers, {
      [key]: value
    });

    return response;
  };

  response.json = (content, status = 200) => new Response(config, JSON.stringify(content), status, 'application/json', response._headers);

  return response;
};

function mapYamlResponsesToMethods(response, responses, config) {
  Object.keys(responses).forEach(name => {
    const { mimetype = 'application/json', exit_code: status = 200 } = responses[name];
    const isJSON = mimetype === 'application/json';

    response[name] = content => new Response(config, isJSON ? JSON.stringify(content) : content, status, mimetype, response._headers);
  });
}
module.exports = exports['default'];