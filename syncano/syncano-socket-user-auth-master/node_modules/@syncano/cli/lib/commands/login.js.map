{"version":3,"sources":["../../src/commands/login.js"],"names":["debug","Login","constructor","context","session","displayWelcomeMessage","user","cyan","email","displayLoginMessage","dim","displayNewAccountMessage","green","promptCreation","confirmQuestion","type","name","message","default","confirm","prompt","exit","run","cmd","checkAuth","err","promptLogin","loginCallback","resp","loginType","settings","account","set","account_key","load","register","password","getAnonymousConnection","loginOrRegister","connection","login","red","responses","loginQuestion","passwordQuestion","validate","value","isEmail","isLength","min"],"mappings":"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","file":"login.js","sourcesContent":["import format from 'chalk'\nimport process from 'process'\nimport inquirer from 'inquirer'\nimport validator from 'validator'\n\nimport logger from '../utils/debug'\nimport { track } from '../utils/analytics'\nimport { echo, p } from '../utils/print-tools'\n\nconst { debug } = logger('cmd-login')\n\nexport default class Login {\n  constructor (context) {\n    debug('Login.constructor')\n    this.context = context\n    this.session = context.session\n  }\n\n  static displayWelcomeMessage (user) {\n    echo()\n    echo(4)(`Welcome back ${format.cyan(user.email)}. You're already logged in!`)\n    echo()\n  }\n\n  static displayLoginMessage () {\n    echo()\n    echo(4)(`Welcome to ${format.cyan('Syncano')} (${format.dim('syncano.io')})`)\n    echo(4)('Please login or create an account by entering your email and password:')\n    echo()\n  }\n\n  static displayNewAccountMessage () {\n    echo()\n    echo(4)(`${format.green('New account has been created!')}`)\n    echo()\n  }\n\n  static async promptCreation () {\n    debug('Login.promptCreation()')\n\n    const confirmQuestion = [{\n      type: 'confirm',\n      name: 'confirm',\n      message: p(8)('This email doesn\\'t exists. Do you want to create new account?'),\n      default: false\n    }]\n\n    const { confirm } = await inquirer.prompt(confirmQuestion) || {}\n    if (confirm === false) return process.exit()\n  }\n\n  async run ([cmd]) {\n    try {\n      const user = await this.session.checkAuth()\n      await Login.displayWelcomeMessage(user)\n    } catch (err) {\n      await this.promptLogin()\n    }\n  }\n\n  async loginCallback (resp, loginType) {\n    this.session.settings.account.set('auth_key', resp.account_key)\n    await this.session.load()\n\n    if (loginType === 'signup') {\n      track('CLI: Sign up')\n    } else {\n      track('CLI: Sign in')\n    }\n    echo()\n    echo(4)(`${format.green('You\\'re in! Enjoy!')} 👍`)\n    echo()\n  }\n\n  async register ({ email, password }) {\n    try {\n      const account = await this.session.getAnonymousConnection().account.register({ email, password })\n      Login.displayNewAccountMessage()\n      return this.loginCallback(account, 'signup')\n    } catch (err) {\n      echo(`Register error: ${err.message}`)\n      process.exit()\n    }\n  }\n\n  async loginOrRegister ({ email, password }) {\n    debug('Registering/Logging in', email)\n    try {\n      const account = await this.session.connection.account.login({ email, password })\n      this.loginCallback(account)\n    } catch (err) {\n      if (err.message === 'Invalid email.') {\n        debug('Login failed, trying to register')\n        await Login.promptCreation()\n        return this.register({ email, password })\n      }\n      echo()\n      echo(4)(`😢  ${format.red(err.message)}`)\n      echo()\n    }\n  }\n\n  async promptLogin () {\n    debug('promptLogin')\n    Login.displayLoginMessage()\n\n    const responses = await inquirer.prompt([Login.loginQuestion, Login.passwordQuestion])\n    await this.loginOrRegister(responses)\n  }\n}\n\nLogin.loginQuestion = {\n  name: 'email',\n  message: p(8)('Your e-mail'),\n  validate: (value) => validator.isEmail(value) || 'E-mail is required!'\n}\n\nLogin.passwordQuestion = {\n  name: 'password',\n  message: p(8)('Password'),\n  type: 'password',\n  validate: (value) => validator.isLength(value, { min: 5 }) || 'Password must contain at least 5 characters.'\n}\n"]}