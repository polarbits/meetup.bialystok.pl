{"version":3,"sources":["../../src/commands/socket-search.js"],"names":["SocketSearchCmd","constructor","context","session","registry","Registry","run","keyword","cmd","table","head","colWidths","wordWrap","long","style","chars","top","bottom","left","mid","right","middle","sockets","searchSocketsByAll","forEach","addRecord","bind","cyan","length","toString","printLegend","err","response","status","process","exit","socket","arrayData","is_mine","private","name","description","author","version","keywords","join","socketData","map","item","colorResponse","push","foundTerm","match","RegExp","replace","green","privateSockets","filter","mineSockets"],"mappings":"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","file":"socket-search.js","sourcesContent":["import _ from 'lodash'\nimport Table from 'cli-table2'\nimport format from 'chalk'\nimport { error, echo, echon } from '../utils/print-tools'\n\nexport default class SocketSearchCmd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n    this.registry = new context.Registry()\n  }\n\n  async run ([keyword, cmd]) {\n    this.keyword = keyword\n    this.table = new Table({\n      head: ['', '', 'name', 'description', 'author', 'version', 'keywords'],\n      colWidths: [2, 2, null, 50, null, null],\n      wordWrap: cmd.long,\n      style: {\n        'padding-left': 0,\n        'padding-right': 0\n      },\n      chars: {\n        top: '',\n        'top-mid': '',\n        'top-left': '',\n        'top-right': '',\n        bottom: '',\n        'bottom-mid': '',\n        'bottom-left': '',\n        'bottom-right': '',\n        left: '',\n        'left-mid': '',\n        mid: '',\n        'mid-mid': '',\n        right: '',\n        'right-mid': '',\n        middle: ' '\n      }\n    })\n\n    try {\n      const sockets = await this.registry.searchSocketsByAll(keyword)\n      sockets.forEach(this.addRecord.bind(this))\n      echo(6)(`${format.cyan(sockets.length)} socket(s) found: `)\n      echo()\n      echo(this.table.toString())\n      echo()\n      if (SocketSearchCmd.printLegend(sockets)) {\n        echo()\n      }\n    } catch (err) {\n      if (err.response && err.response.status === 404) {\n        echo(4)('No sockets found ðŸ˜•')\n        echon(4)(`Search takes ${format.cyan('name')}, ${format.cyan('description')} `)\n        echo(`and ${format.cyan('keywords')} into account. Try again!`)\n        echo()\n        process.exit()\n      } else {\n        echo()\n        error(4)(err)\n        echo()\n        process.exit(1)\n      }\n    }\n  }\n\n  addRecord (socket) {\n    const arrayData = [\n      socket.is_mine ? ' ðŸ‘·' : '',\n      socket.private ? 'ðŸ”’ ' : '',\n      socket.name,\n      socket.description,\n      socket.author,\n      socket.version,\n      socket.keywords ? socket.keywords.join(', ') : ''\n    ]\n    const socketData = arrayData.map((item) => this.colorResponse(item))\n    this.table.push(socketData)\n  }\n\n  colorResponse (item) {\n    const foundTerm = item && item.match(new RegExp(this.keyword, 'i'))\n    if (foundTerm) {\n      return item.replace(foundTerm, format.green(foundTerm))\n    }\n    return item\n  }\n\n  static printLegend (sockets) {\n    const privateSockets = _.filter(sockets, { private: true })\n    const mineSockets = _.filter(sockets, { is_mine: true })\n\n    if (mineSockets.length > 0 || privateSockets.length > 0) {\n      echon(6)()\n      if (mineSockets.length > 0) {\n        echon('ðŸ‘·  your socket')\n      }\n      if (privateSockets.length > 0) {\n        if (mineSockets.length > 0) {\n          echon(', ')\n        }\n        echon('ðŸ”’  private socket')\n      }\n      echo()\n      return true\n    }\n  }\n}\n"]}