{"version":3,"sources":["../../src/commands/hosting-sync.js"],"names":["debug","HostingSync","constructor","context","session","Socket","run","hostingName","cmd","name","hosting","socket","get","existLocally","process","exit","existRemotely","syncHosting","project","instance","cyan","dim","getURL","output","syncFiles","err"],"mappings":";;;;;;AAAA;;;;AAEA;;;;AACA;;AACA;;;;;;;;AAEA,MAAM,EAAEA,KAAF,KAAY,qBAAO,kBAAP,CAAlB;;AAEA,MAAMC,WAAN,CAAkB;AAChBC,cAAaC,OAAb,EAAsB;AACpBH,UAAM,yBAAN;AACA,SAAKG,OAAL,GAAeA,OAAf;AACA,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,MAAL,GAAcF,QAAQE,MAAtB;AACD;;AAEKC,KAAN,CAAW,CAACC,WAAD,EAAcC,GAAd,CAAX,EAA+B;AAAA;;AAAA;AAC7BR,YAAO,mBAAkBO,WAAY,EAArC;AACA,YAAKE,IAAL,GAAYF,WAAZ;AACA,UAAI,CAACA,WAAD,IAAgB,OAAOA,WAAP,KAAuB,QAA3C,EAAqD,OAAO,uBAAM,uCAAN,CAAP;;AAErD,UAAIG,UAAU,IAAd;AACA,UAAIF,IAAIG,MAAR,EAAgB;AACd,cAAKA,MAAL,GAAc,MAAM,MAAKN,MAAL,CAAYO,GAAZ,CAAgBJ,IAAIG,MAApB,CAApB;AACD,OAFD,MAEO;AACLD,kBAAU,MAAM,kBAAQE,GAAR,CAAYL,WAAZ,EAAyB,MAAKI,MAA9B,CAAhB;AACD;;AAED,UAAI,CAACD,QAAQG,YAAb,EAA2B;AACzB,YAAI,MAAKF,MAAT,EAAiB;AACf,iCAAM,CAAN,EAAU,gBAAe,MAAKF,IAAK,qBAAoB,MAAKE,MAAL,CAAYF,IAAK,WAAxE;AACD,SAFD,MAEO;AACL,iCAAM,CAAN,EAAU,gBAAe,MAAKA,IAAK,2BAAnC;AACD;AACD;AACAK,gBAAQC,IAAR;AACD;;AAED,aAAOL,QAAQM,aAAR,IAAyB,MAAKC,WAAL,CAAiBP,OAAjB,CAAhC;AAtB6B;AAuB9B;;AAEKO,aAAN,CAAmBP,OAAnB,EAA4B;AAAA;;AAAA;AAC1BV,YAAO,WAAUU,QAAQD,IAAK,KAAI,OAAKL,OAAL,CAAac,OAAb,CAAqBC,QAAS,GAAhE;;AAEA,UAAI,CAACT,QAAQD,IAAb,EAAmB;AACnB,4BAAK,CAAL,EAAS,6BAA4B,gBAAOW,IAAP,CAAYV,QAAQD,IAApB,CAA0B,EAA/D;AACA,4BAAK,CAAL,EAAS,GAAE,gBAAOY,GAAP,CAAWX,QAAQY,MAAR,EAAX,CAA6B,EAAxC;AACA;;AAEA,UAAI;AACF,cAAMC,SAAS,MAAMb,QAAQc,SAAR,EAArB;AACA,8BAAKD,MAAL;AACD,OAHD,CAGE,OAAOE,GAAP,EAAY;AACZ,+BAAM,CAAN,EAASA,GAAT;AACA;AACD;AAdyB;AAe3B;AAhDe;;kBAmDHxB,W","file":"hosting-sync.js","sourcesContent":["import format from 'chalk'\n\nimport logger from '../utils/debug'\nimport { echo, error } from '../utils/print-tools'\nimport Hosting from '../utils/hosting'\n\nconst { debug } = logger('cmd-hosting-sync')\n\nclass HostingSync {\n  constructor (context) {\n    debug('HostingSync.constructor')\n    this.context = context\n    this.session = context.session\n    this.Socket = context.Socket\n  }\n\n  async run ([hostingName, cmd]) {\n    debug(`HostingSync.run ${hostingName}`)\n    this.name = hostingName\n    if (!hostingName || typeof hostingName !== 'string') return error('Hosting name is a required parameter!')\n\n    let hosting = null\n    if (cmd.socket) {\n      this.socket = await this.Socket.get(cmd.socket)\n    } else {\n      hosting = await Hosting.get(hostingName, this.socket)\n    }\n\n    if (!hosting.existLocally) {\n      if (this.socket) {\n        error(4)(`There is no \"${this.name}\" hosting in the \"${this.socket.name}\" socket!`)\n      } else {\n        error(4)(`There is no \"${this.name}\" hosting in the project!`)\n      }\n      echo()\n      process.exit()\n    }\n\n    return hosting.existRemotely && this.syncHosting(hosting)\n  }\n\n  async syncHosting (hosting) {\n    debug(`Syncing ${hosting.name} (${this.session.project.instance})`)\n\n    if (!hosting.name) return\n    echo(8)(`Syncing hosting files for ${format.cyan(hosting.name)}`)\n    echo(8)(`${format.dim(hosting.getURL())}`)\n    echo()\n\n    try {\n      const output = await hosting.syncFiles()\n      echo(output)\n    } catch (err) {\n      error(8)(err)\n      echo()\n    }\n  }\n}\n\nexport default HostingSync\n"]}