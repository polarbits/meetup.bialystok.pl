{"version":3,"sources":["../../../src/utils/registry/registry.js"],"names":["debug","Registry","searchSocketByName","name","version","connection","registry","getSocket","socket","fileName","join","getBuildPath","fileDescriptor","createWriteStream","url","publishSocket","socketName","searchSocketsByAll","keyword","submitSocket","createPackageZip","spec","getFullConfig","getSocketZip"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;;;;;AAEA,MAAM,EAAEA,KAAF,KAAY,qBAAO,gBAAP,CAAlB;;AAEA,MAAMC,QAAN,CAAe;AACPC,oBAAN,CAA0BC,IAA1B,EAAgCC,OAAhC,EAAyC;AAAA;AACvCJ,YAAO,uBAAsBG,IAAK,IAAGC,OAAQ,EAA7C;AACA,aAAO,kBAAQC,UAAR,CAAmBC,QAAnB,CAA4BJ,kBAA5B,CAA+CC,IAA/C,EAAqDC,OAArD,CAAP;AAFuC;AAGxC;;AAED,SAAOG,SAAP,CAAkBC,MAAlB,EAA0B;AACxBR,UAAM,WAAN;;AAEA,UAAMS,WAAW,eAAKC,IAAL,CAAU,kBAAQC,YAAR,EAAV,EAAmC,GAAEH,OAAOL,IAAK,MAAjD,CAAjB;AACA,UAAMS,iBAAiB,aAAGC,iBAAH,CAAqBJ,QAArB,CAAvB;;AAEA,WAAO,kBAAQJ,UAAR,CAAmBC,QAAnB,CAA4BC,SAA5B,CAAsCC,OAAOM,GAA7C,EAAkDF,cAAlD,CAAP;AACD;;AAEKG,eAAN,CAAqBC,UAArB,EAAiCZ,OAAjC,EAA0C;AAAA;AACxCJ,YAAO,kBAAiBgB,UAAW,KAAIZ,OAAQ,EAA/C;AACA,aAAO,kBAAQC,UAAR,CAAmBC,QAAnB,CAA4BS,aAA5B,CAA0CC,UAA1C,EAAsDZ,OAAtD,CAAP;AAFwC;AAGzC;;AAEKa,oBAAN,CAA0BC,OAA1B,EAAmC;AAAA;AACjClB,YAAO,uBAAsBkB,OAAQ,EAArC;AACA,aAAO,kBAAQb,UAAR,CAAmBC,QAAnB,CAA4BW,kBAA5B,CAA+CC,OAA/C,CAAP;AAFiC;AAGlC;;AAEKC,cAAN,CAAoBX,MAApB,EAA4B;AAAA;AAC1BR,YAAO,iBAAgBQ,OAAOL,IAAK,EAAnC;AACA,YAAMK,OAAOY,gBAAP,EAAN;;AAEA,aAAO,kBACJf,UADI,CAEJC,QAFI,CAGJa,YAHI,CAGSX,OAAOa,IAHhB,EAGsBb,OAAOc,aAAP,EAHtB,EAG8Cd,OAAOe,YAAP,EAH9C,CAAP;AAJ0B;AAQ3B;AAjCY;;kBAoCAtB,Q","file":"registry.js","sourcesContent":["import fs from 'fs'\nimport path from 'path'\n\nimport logger from '../debug'\nimport session from '../session'\n\nconst { debug } = logger('utils-registry')\n\nclass Registry {\n  async searchSocketByName (name, version) {\n    debug(`searchSocketByName: ${name} ${version}`)\n    return session.connection.registry.searchSocketByName(name, version)\n  }\n\n  static getSocket (socket) {\n    debug('getSocket')\n\n    const fileName = path.join(session.getBuildPath(), `${socket.name}.zip`)\n    const fileDescriptor = fs.createWriteStream(fileName)\n\n    return session.connection.registry.getSocket(socket.url, fileDescriptor)\n  }\n\n  async publishSocket (socketName, version) {\n    debug(`publishSocket: ${socketName}, ${version}`)\n    return session.connection.registry.publishSocket(socketName, version)\n  }\n\n  async searchSocketsByAll (keyword) {\n    debug(`searchSocketsByAll: ${keyword}`)\n    return session.connection.registry.searchSocketsByAll(keyword)\n  }\n\n  async submitSocket (socket) {\n    debug(`submitSocket: ${socket.name}`)\n    await socket.createPackageZip()\n\n    return session\n      .connection\n      .registry\n      .submitSocket(socket.spec, socket.getFullConfig(), socket.getSocketZip())\n  }\n}\n\nexport default Registry\n"]}