{"version":3,"sources":["../../src/utils/session.js"],"names":["debug","Session","constructor","settings","projectPath","project","userId","walkup","promisify","majorVersion","version","split","HOST","process","env","SYNCANO_HOST","ENDPOINT_HOST","getSpaceHost","instance","getInitInstance","getPluginsInstance","getBaseURL","getHost","getDistPath","distPath","join","sync","getBuildPath","buildPath","getAnonymousConnection","meta","createConnection","account","authenticated","connection","accountKey","getAuthKey","instanceName","details","get","id","err","deleteInstance","name","delete","createInstance","create","getInstance","instanceNameToGet","getInstances","list","checkAuth","userDetails","Account","getUserDetails","resolve","reject","Error","findProjectPath","existsSync","cwd","searchInPath","pathToCheck","HOME","files","readdirSync","includes","nextFolder","parse","dir","load","getProject","loadPlugins","program","context","isAuthenticated","cyan","exit","isAuthenticatedToInit","red","checkConnection","hasProject","hasProjectPath","hasSocket","socketName","socket","existLocally","notAlreadyInitialized","deployProject","hostings","all","map","hosting","deploy"],"mappings":"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","file":"session.js","sourcesContent":["import Syncano from '@syncano/core'\nimport _ from 'lodash'\nimport fs from 'fs'\nimport format from 'chalk'\nimport path from 'path'\nimport mkdirp from 'mkdirp'\nimport walkUp from 'node-walkup'\nimport Promise from 'bluebird'\n\nimport logger from './debug'\nimport pjson from '../../package.json'\nimport getSettings from '../settings'\nimport genUniqueName from './unique-instance'\nimport Socket from './sockets'\nimport Init from './init'\nimport Hosting from './hosting'\nimport Plugins from './plugins'\nimport { echo } from './print-tools'\n\nconst { debug } = logger('utils-session')\n\nexport class Session {\n  constructor () {\n    this.settings = null\n    this.projectPath = null\n    this.project = null\n    this.userId = null\n    this.walkup = Promise.promisify(walkUp)\n\n    this.majorVersion = pjson.version.split('.')[0]\n\n    this.HOST = process.env.SYNCANO_HOST || 'api.syncano.io'\n    this.ENDPOINT_HOST = this.HOST === 'api.syncano.io' ? 'syncano.space' : 'syncano.link'\n  }\n\n  getSpaceHost () {\n    if (this.project && this.project.instance) {\n      return `${this.project.instance}.${this.ENDPOINT_HOST}`\n    }\n  }\n\n  getInitInstance () {\n    return new Init(this)\n  }\n\n  getPluginsInstance () {\n    return new Plugins(this)\n  }\n\n  getBaseURL () {\n    return `https://${this.getHost()}`\n  }\n\n  getHost () {\n    return this.HOST\n  }\n\n  getDistPath () {\n    let distPath = '.dist'\n    if (this.projectPath) {\n      distPath = path.join(this.projectPath, '.dist')\n    }\n    mkdirp.sync(distPath)\n    return distPath\n  }\n\n  getBuildPath () {\n    const buildPath = path.join(this.projectPath, '.build')\n    mkdirp.sync(buildPath)\n    return buildPath\n  }\n\n  getAnonymousConnection () {\n    return new Syncano({\n      meta: {\n        'api_host': this.getHost()\n      }\n    })\n  }\n\n  async createConnection () {\n    debug('createConnection')\n    if (this.settings.account.authenticated()) {\n      debug('user is authenticated')\n      this.connection = new Syncano({\n        accountKey: this.settings.account.getAuthKey(),\n        meta: {\n          'api_host': this.getHost()\n        }\n      })\n\n      if (this.project && this.project.instance) {\n        this.connection = new Syncano({\n          instanceName: this.project.instance,\n          accountKey: this.settings.account.getAuthKey(),\n          meta: {\n            'api_host': this.getHost()\n          }\n        })\n      }\n    } else {\n      this.connection = this.getAnonymousConnection()\n    }\n\n    try {\n      const details = await this.connection.account.get(this.settings.account.getAuthKey())\n      this.userId = details.id\n    } catch (err) {}\n  }\n\n  async deleteInstance (name) {\n    return this.connection.instance.delete(name)\n  }\n\n  async createInstance (name = genUniqueName()) {\n    return this.connection.instance.create({ name })\n  }\n\n  async getInstance (instanceName) {\n    const instanceNameToGet = instanceName || (this.project && this.project.instance)\n    return this.connection.instance.get(instanceNameToGet)\n  }\n\n  async getInstances () {\n    return this.connection.instance.list()\n  }\n\n  async checkAuth () {\n    const userDetails = await this.connection.Account.getUserDetails()\n    return new Promise((resolve, reject) => {\n      if (userDetails) {\n        return resolve(userDetails)\n      }\n      reject(new Error('No such user!'))\n    })\n  }\n\n  static findProjectPath () {\n    return new Promise((resolve, reject) => {\n      if (fs.existsSync('syncano.yml')) {\n        return resolve(process.cwd())\n      }\n      if (fs.existsSync('syncano/syncano.yml')) {\n        return resolve(path.join(process.cwd(), 'syncano'))\n      }\n\n      const searchInPath = (pathToCheck) => {\n        if (pathToCheck === process.env.HOME || pathToCheck === '/') {\n          return reject(new Error('No more folders to check'))\n        }\n\n        let files = null\n        try {\n          files = fs.readdirSync(pathToCheck)\n        } catch (err) {\n          return reject(new Error(`Path ${pathToCheck} can not be read`))\n        }\n\n        if (_.includes(files, 'syncano.yml')) {\n          return resolve(pathToCheck)\n        }\n\n        const nextFolder = path.parse(pathToCheck)\n        if (nextFolder.name) {\n          searchInPath(nextFolder.dir)\n        } else {\n          return reject(new Error('No more folders to check'))\n        }\n      }\n\n      searchInPath(process.cwd())\n    })\n  }\n\n  async load () {\n    debug('load')\n\n    // Checking all folders up\n    try {\n      const projectPath = await Session.findProjectPath()\n      debug('Searching for syncano.yml', projectPath)\n      this.projectPath = projectPath\n      this.settings = getSettings(projectPath)\n      this.project = this.settings.account.getProject(this.projectPath)\n    } catch (err) {\n      this.settings = getSettings()\n    }\n    await this.createConnection()\n    return this\n  }\n\n  loadPlugins (program, context) {\n    new Plugins(this).load(program, context)\n  }\n\n  isAuthenticated () {\n    if (!this.settings.account.authenticated()) {\n      echo()\n      echo(4)('You are not logged in!')\n      echo(4)(`Type ${format.cyan('syncano-cli login')} for login to your account.`)\n      echo()\n      process.exit(1)\n    }\n  }\n\n  isAuthenticatedToInit () {\n    if (!this.settings.account.authenticated()) {\n      echo()\n      echo(4)(format.red('You have to be a logged in to be able an initialize a new project!'))\n      echo()\n    }\n  }\n\n  async checkConnection (instanceName) {\n    const instance = await this.getInstance(instanceName)\n    if (!instance) {\n      echo()\n      echo(4)(`Instance ${format.cyan(instanceName || this.project.instance)} was not found on your account!`)\n      echo()\n\n      if (instanceName) return process.exit()\n\n      echo(4)(`Type ${format.cyan('syncano-cli attach')} to choose one of the existing instances.`)\n      echo()\n\n      return process.exit()\n    }\n\n    return instance\n  }\n\n  hasProject () {\n    this.hasProjectPath()\n\n    if (!this.project) {\n      echo()\n      echo(4)('You have to attach this project to one of your instances.')\n      echo(4)(`Try ${format.cyan('syncano-cli attach')}.`)\n      echo()\n      process.exit()\n    }\n  }\n\n  hasProjectPath () {\n    if (!this.projectPath) {\n      echo()\n      echo(4)(`I don't see any project here. Try ${format.cyan('syncano-cli init')}.`)\n      echo()\n      process.exit()\n    }\n  }\n\n  hasSocket (socketName) { // eslint-disable-line class-methods-use-this\n    const socket = new Socket(socketName)\n    if (!socket.existLocally) {\n      echo()\n      echo(4)('File socket.yml was not found in a project directory!')\n      echo(4)(`Check your directory or try ${format.cyan('syncano-cli create')} to create a new Socket.`)\n      echo()\n      process.exit()\n    }\n  }\n\n  notAlreadyInitialized () {\n    if (this.projectPath && this.project) {\n      echo()\n      echo(4)('You are fine! Project in this folder is already initiated!')\n      echo(4)(`It is using ${format.cyan(this.project.instance)} Syncano instance.`)\n      echo()\n      process.exit()\n    }\n  }\n\n  async deployProject () { // eslint-disable-line class-methods-use-this\n    const hostings = await Hosting.list()\n    return Promise.all(hostings.map((hosting) => hosting.deploy()))\n  }\n}\n\nexport default new Session()\n"]}