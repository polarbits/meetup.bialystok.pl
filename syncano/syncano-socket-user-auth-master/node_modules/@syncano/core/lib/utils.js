'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.checkStatus = checkStatus;
exports.parseJSON = parseJSON;
function checkStatus(response) {
  if (response.status >= 200 && response.status < 300) {
    return response.data;
  }

  let error;

  try {
    if (typeof response.data === 'object' && response.data !== null) {
      if (response.data.detail) {
        error = new Error(response.data.detail);
      } else if (response.data.query) {
        error = new Error(response.data.query);
      } else {
        const key = Object.keys(response.data)[0];

        error = new Error(`${key}: ${response.data[key]}`);
      }
    } else {
      error = new Error(response.data.detail);
    }
  } catch (err) {
    error = new Error(response.statusText);
  }

  error.response = response;
  error.data = response.data;
  error.status = response.status;
  error.headers = response.headers;
  error.size = response.size;
  error.timeout = response.timeout;
  error.url = response.url;

  throw error;
}

function parseJSON(response) {
  const mimetype = response.headers.get('Content-Type');

  if (response.status === 204 || mimetype === null) {
    return Promise.resolve(_extends({
      data: undefined
    }, response));
  }

  // Parse JSON
  if (/^.*\/.*\+json/.test(mimetype) || /^application\/json/.test(mimetype)) {
    return response.json().then(res => _extends({
      data: res
    }, response));
  }

  // Parse XML and plain text
  if (/^text\/.*/.test(mimetype) || /^.*\/.*\+xml/.test(mimetype) || mimetype === 'text/plain') {
    return response.text().then(res => _extends({
      data: res
    }, response));
  }

  return response.arrayBuffer();
}