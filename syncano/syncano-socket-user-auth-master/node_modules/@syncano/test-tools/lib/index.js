'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanUpAccount = exports.uniqueInstance = exports.deleteInstance = exports.createInstance = exports.createProject = exports.shutdownLocation = exports.setupLocation = exports.createdSocketName = exports.randomKey = exports.cliLocation = exports.nixt = exports.removeTestRegistryEnv = exports.assignTestRegistryEnv = exports.createTempEmail = exports.splitTestBaseEmail = exports.getRandomString = exports.returnTestGlobals = exports.testsLocation = undefined;

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _core = require('@syncano/core');

var _core2 = _interopRequireDefault(_core);

var _nixt = require('nixt');

var _nixt2 = _interopRequireDefault(_nixt);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _uniqueInstance = require('./unique-instance');

var _uniqueInstance2 = _interopRequireDefault(_uniqueInstance);

var _homeDir = require('home-dir');

var _homeDir2 = _interopRequireDefault(_homeDir);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint import/no-extraneous-dependencies: "warn" */
const returnTestGlobals = () => {
  return {
    email: process.env.E2E_CLI_EMAIL,
    password: process.env.E2E_CLI_PASSWORD,
    accountKey: process.env.E2E_CLI_ACCOUNT_KEY,
    syncanoYmlPath: `${(0, _homeDir2.default)()}/syncano-test.yml`,
    instance: process.env.E2E_CLI_INSTANCE_NAME || 'wandering-pine-7032'
  };
};

const splitTestBaseEmail = tempEmail => {
  const splittedEmail = {};

  [splittedEmail.emailName, splittedEmail.emailDomain] = tempEmail.split('@');

  return splittedEmail;
};

const createTempEmail = (tempEmail, tempPass) => {
  const { emailName, emailDomain } = splitTestBaseEmail(tempEmail);

  return `${emailName}+${tempPass}@${emailDomain}`;
};

const getRandomString = (prefix = 'randomString') => {
  return `${prefix}_${Math.random().toString(36).slice(2)}`;
};

const assignTestRegistryEnv = () => {
  const registryInstanceName = process.env.SYNCANO_SOCKET_REGISTRY;
  process.env.SYNCANO_SOCKET_REGISTRY_INSTANCE = registryInstanceName.split('.')[0];
};

const removeTestRegistryEnv = () => {
  delete process.env.SYNCANO_SOCKET_REGISTRY_INSTANCE;
};

if (process.env.SYNCANO_E2E_DEBUG) {
  _nixt2.default.prototype.expect = function (fn) {
    function wrappedExpect(result) {
      console.log(' '.repeat(6), 'stdout:');
      console.log(' '.repeat(8), result.stdout);
      console.log(' '.repeat(6), 'code:');
      console.log(' '.repeat(8), result.code.toString());
      return fn(result);
    }
    this.expectations.push(wrappedExpect);
  };
}
const nixt = _nixt2.default;

process.env.SYNCANO_ACCOUNT_FILE = 'syncano-test';

// Variables used in tests
const { accountKey, syncanoYmlPath, instance } = returnTestGlobals();

// const connection = Syncano({ baseUrl: `https://${process.env.SYNCANO_HOST}`, accountKey })
const connection = new _core2.default({ accountKey, meta: { 'api_host': process.env.SYNCANO_HOST } });
const testsLocation = `${process.cwd()}/e2e-tests`;
const cliLocation = _path2.default.join(process.cwd(), '/node_modules/@syncano/cli/lib/cli.js');
const randomKey = getRandomString();
const createdSocketName = getRandomString();

const setupLocation = name => {
  const location = [testsLocation, name].join('-');
  if (!_fsExtra2.default.existsSync(location)) {
    _mkdirp2.default.sync(location);
  }
  return location;
};

const shutdownLocation = location => {
  if (_fsExtra2.default.existsSync(location)) {
    _fsExtra2.default.removeSync(location);
  }
  _fsExtra2.default.removeSync(syncanoYmlPath);
};

// Helper functions used in tests
const createInstance = instanceName => connection.instance.create({ name: instanceName || (0, _uniqueInstance2.default)() }).catch(error => process.stderr.write(JSON.stringify(error.message, null, '')));

const deleteInstance = instanceName => connection.instance.delete(instanceName).catch(error => process.stderr.write(JSON.stringify(`deleteInstance: ${error.message}`, null, '')));

const deleteEachInstance = instances => {
  const list = [];

  _lodash2.default.each(instances, item => list.push(deleteInstance(item)));
  return Promise.all(list);
};

const cleanUpAccount = () => connection.instance.list().then(res => {
  const instances = _lodash2.default.pull(_lodash2.default.map(res, 'name'), instance);
  return deleteEachInstance(instances);
}).catch(error => process.stderr.write(JSON.stringify(error.message)));

const createProject = (instanceName, projectTestTemplate) => {
  _fsExtra2.default.copySync(projectTestTemplate, _path2.default.join(testsLocation, instanceName));
  return createInstance(instanceName);
};

exports.testsLocation = testsLocation;
exports.returnTestGlobals = returnTestGlobals;
exports.getRandomString = getRandomString;
exports.splitTestBaseEmail = splitTestBaseEmail;
exports.createTempEmail = createTempEmail;
exports.assignTestRegistryEnv = assignTestRegistryEnv;
exports.removeTestRegistryEnv = removeTestRegistryEnv;
exports.nixt = nixt;
exports.cliLocation = cliLocation;
exports.randomKey = randomKey;
exports.createdSocketName = createdSocketName;
exports.setupLocation = setupLocation;
exports.shutdownLocation = shutdownLocation;
exports.createProject = createProject;
exports.createInstance = createInstance;
exports.deleteInstance = deleteInstance;
exports.uniqueInstance = _uniqueInstance2.default;
exports.cleanUpAccount = cleanUpAccount;