'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _debug = require('../debug');

var _debug2 = _interopRequireDefault(_debug);

var _session = require('../session');

var _session2 = _interopRequireDefault(_session);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { debug } = (0, _debug2.default)('utils-registry');

class Registry {
  searchSocketByName(name, version) {
    return _asyncToGenerator(function* () {
      debug(`searchSocketByName: ${name} ${version}`);
      return _session2.default.connection.registry.searchSocketByName(name, version);
    })();
  }

  static getSocket(socket) {
    debug('getSocket');

    const fileName = _path2.default.join(_session2.default.getBuildPath(), `${socket.name}.zip`);
    const fileDescriptor = _fs2.default.createWriteStream(fileName);

    return _session2.default.connection.registry.getSocket(socket.url, fileDescriptor);
  }

  publishSocket(socketName, version) {
    return _asyncToGenerator(function* () {
      debug(`publishSocket: ${socketName}, ${version}`);
      return _session2.default.connection.registry.publishSocket(socketName, version);
    })();
  }

  searchSocketsByAll(keyword) {
    return _asyncToGenerator(function* () {
      debug(`searchSocketsByAll: ${keyword}`);
      return _session2.default.connection.registry.searchSocketsByAll(keyword);
    })();
  }

  submitSocket(socket) {
    return _asyncToGenerator(function* () {
      debug(`submitSocket: ${socket.name}`);
      yield socket.createPackageZip();

      return _session2.default.connection.registry.submitSocket(socket.spec, socket.getFullConfig(), socket.getSocketZip());
    })();
  }
}

exports.default = Registry;
module.exports = exports['default'];
//# sourceMappingURL=registry.js.map