{"version":3,"sources":["../../../src/utils/sockets/utils.js"],"names":["debug","socketTemplates","installedTemplatesNames","allTemplatesNames","concat","installedTemplates","map","templateName","templateSpec","name","description","templateLongDesc","getTemplatesChoices","socketTemplate","grey","searchForSockets","projectPath","sockets","dirs","p","readdirSync","filter","f","statSync","join","isDirectory","forEach","dir","socketFile","existsSync","socket","load","readFileSync","push","findLocalPath","socketName","socketPath","process","cwd","socketInCurrentPath","dirname","file","listLocal","getOrigFilePath","origFileLine","origFilePath","source","match","replace","deleteFolderRecursive","folder","index","curPath","lstatSync","unlinkSync","rmdirSync"],"mappings":"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","file":"utils.js","sourcesContent":["import fs from 'fs'\nimport YAML from 'js-yaml'\nimport path from 'path'\nimport format from 'chalk'\n\nimport logger from '../debug'\nimport session from '../session'\nimport { getTemplateSpec, builtInSocketTemplates, installedSocketTemplates } from '../templates'\n\nconst { debug } = logger('utils-sockets-utils')\n\nconst socketTemplates = () => {\n  const installedTemplatesNames = installedSocketTemplates()\n  const allTemplatesNames = builtInSocketTemplates.concat(installedTemplatesNames)\n\n  const installedTemplates = allTemplatesNames.map(templateName => {\n    debug('loading template:', templateName)\n    const templateSpec = getTemplateSpec(templateName)\n\n    return { name: templateName, description: templateSpec.templateLongDesc }\n  })\n  return installedTemplates\n}\n\nconst getTemplatesChoices = () => socketTemplates().map(socketTemplate =>\n    `${socketTemplate.description} - ${format.grey(`(${socketTemplate.name})`)}`)\n\nconst searchForSockets = (projectPath) => {\n  const sockets = []\n\n  const dirs = (p) => fs.readdirSync(p).filter((f) => fs.statSync(path.join(p, f)).isDirectory())\n\n  dirs(projectPath).forEach((dir) => {\n    const socketFile = path.join(projectPath, dir, 'socket.yml')\n    if (fs.existsSync(socketFile)) {\n      const socket = YAML.load(fs.readFileSync(socketFile, 'utf8')) || {}\n      sockets.push([socketFile, socket])\n    }\n  })\n\n  return sockets\n}\n\nconst findLocalPath = (socketName) => {\n  debug('findLocalPath')\n  let socketPath = null\n  const projectPath = session.projectPath || process.cwd()\n\n  if (!fs.existsSync(projectPath)) {\n    return socketPath\n  }\n\n  const socketInCurrentPath = path.join(projectPath, 'socket.yml')\n  if (fs.existsSync(socketInCurrentPath)) {\n    const socket = YAML.load(fs.readFileSync(socketInCurrentPath, 'utf8')) || {}\n    if (socket.name === socketName) {\n      return path.dirname(socketInCurrentPath)\n    }\n  }\n\n  searchForSockets(projectPath).forEach(([file, socket]) => {\n    if (socket.name === socketName) {\n      socketPath = path.dirname(file)\n    }\n  })\n\n  return socketPath\n}\n\n// Listing sockets\n// list sockets based on project path\nconst listLocal = () => {\n  debug('listLocal')\n  return searchForSockets(session.projectPath).map(([file, socket]) => socket.name)\n}\n\nconst getOrigFilePath = (origFileLine) => {\n  let origFilePath = origFileLine.source.match(/webpack:\\/\\/\\/(.*\\.js)(\\?|$)/)[1]\n\n  if (origFilePath.match(/~\\//)) {\n    origFilePath = origFilePath.replace('~', 'node_modules')\n  }\n  return origFilePath\n}\n\nconst deleteFolderRecursive = (folder) => {\n  if (fs.existsSync(folder)) {\n    fs.readdirSync(folder).forEach((file, index) => {\n      const curPath = path.join(folder, file)\n      if (fs.lstatSync(curPath).isDirectory()) { // recurse\n        deleteFolderRecursive(curPath)\n      } else {\n        fs.unlinkSync(curPath)\n      }\n    })\n    fs.rmdirSync(folder)\n  }\n}\n\nexport default {\n  deleteFolderRecursive,\n  getTemplatesChoices,\n  findLocalPath,\n  listLocal,\n  getOrigFilePath\n}\n"]}