'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _session = require('../session');

var _session2 = _interopRequireDefault(_session);

var _debug = require('../debug');

var _debug2 = _interopRequireDefault(_debug);

var _printTools = require('../print-tools');

var _templates = require('../templates');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { debug } = (0, _debug2.default)('utils-init');

class Init {
  constructor() {
    this.session = _session2.default;
  }

  static projectTemplates() {
    const allTemplates = _templates.builtInProjectTemplates.concat((0, _templates.installedProjectTemplates)());
    const installedTemplates = allTemplates.map(templateName => {
      debug('loading template:', templateName);
      const templateSpec = (0, _templates.getTemplateSpec)(templateName);

      return { name: templateName, description: templateSpec.description };
    });
    return installedTemplates;
  }

  static getTemplatesChoices() {
    return Init.projectTemplates().map(template => `${template.description} ${_chalk2.default.grey(`- (${template.name})`)}`);
  }

  createFilesAndFolders(pathToCopyTo = process.cwd()) {
    debug('createFilesAndFolders()');

    try {
      debug('Template name:', this.templateName);
      debug('Path to copy to:', pathToCopyTo);
      _fsExtra2.default.copySync((0, _templates.getTemplate)(this.templateName), pathToCopyTo);
      (0, _printTools.echo)(4)(_chalk2.default.dim(`Project has been created from ${_chalk2.default.green(this.templateName)} template.`));
      (0, _printTools.echo)();
    } catch (err) {
      (0, _printTools.echo)(err);
      throw err;
    }
  }

  checkConfigFiles() {
    return !_fsExtra2.default.existsSync(this.session.projectPath);
  }

  checkIfInitiated() {
    return _fsExtra2.default.existsSync(this.session.projectPath) && this.session.project;
  }

  addConfigFiles(projectParams = {}, projectPath) {
    var _this = this;

    return _asyncToGenerator(function* () {
      if (projectPath) {
        _this.session.settings.account.addProject(projectPath, projectParams);
      } else {
        _this.session.settings.account.addProject(_path2.default.join(process.cwd(), 'syncano'), projectParams);
      }
      yield _this.session.load();

      (0, _printTools.echo)(4)(`Your project is attached to ${_chalk2.default.green(projectParams.instance)} instance now!`);
    })();
  }

  noConfigFiles() {
    debug('noConfigFiles()');
    this.createFilesAndFolders();
  }
}

exports.default = Init;
module.exports = exports['default'];
//# sourceMappingURL=init.js.map