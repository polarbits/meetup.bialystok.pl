{"version":3,"sources":["../../src/utils/validate-commands.js"],"names":["validateCommands","commandsArr","isCommandFound","commands","some","command","_name","text","invalidCommand","red","outputHelp"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AAEA,SAASA,gBAAT,CAA2BC,cAAc,EAAzC,EAA6C;AAC3C;AACA,QAAMC,iBAAiB,kBAAQC,QAAR,CAAiBC,IAAjB,CAAuBC,OAAD,IAAaA,QAAQC,KAAR,KAAkBL,YAAY,CAAZ,CAArD,CAAvB;AACA,QAAMM,OAAO,4DAAb;AACA,QAAMC,iBAAkB,OAAMP,YAAY,CAAZ,CAAe,KAAI,gBAAOQ,GAAP,CAAWF,IAAX,CAAiB,EAAlE;;AAEA,MAAI,CAACL,cAAL,EAAqB;AACnB,0BAAKM,cAAL;AACA,sBAAQE,UAAR;AACD;AACF;;kBAEcV,gB","file":"validate-commands.js","sourcesContent":["import format from 'chalk'\nimport program from '../program'\nimport { echo } from '../utils/print-tools'\n\nfunction validateCommands (commandsArr = []) {\n  // eslint-disable-next-line no-underscore-dangle\n  const isCommandFound = program.commands.some((command) => command._name === commandsArr[0])\n  const text = 'is not a valid command, you can find valid commands below:'\n  const invalidCommand = `\\n '${commandsArr[0]}' ${format.red(text)}`\n\n  if (!isCommandFound) {\n    echo(invalidCommand)\n    program.outputHelp()\n  }\n}\n\nexport default validateCommands\n"]}