'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createInstance = undefined;

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _debug = require('../../utils/debug');

var _debug2 = _interopRequireDefault(_debug);

var _printTools = require('../../utils/print-tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const { debug } = (0, _debug2.default)('cmd-helpers-socket');

const createInstance = exports.createInstance = (() => {
  var _ref = _asyncToGenerator(function* (instanceName, session) {
    let newInstance = null;
    try {
      debug('Creating Instance');
      (0, _printTools.echo)();
      (0, _printTools.echon)(4)('Creating Syncano Instance... ');
      newInstance = yield session.createInstance(instanceName);
    } catch (err) {
      (0, _printTools.echo)();
      (0, _printTools.echo)();
      if (err.message === 'No such API Key.') {
        (0, _printTools.error)(4)('It looks like your account key is invalid.');
        (0, _printTools.echo)(4)(`Try ${_chalk2.default.cyan('syncano-cli logout')} and ${_chalk2.default.cyan('syncano-cli login')} again.`);
      } else if (err.message === 'name: This field must be unique.') {
        (0, _printTools.error)(4)('Instance already exist!');
        (0, _printTools.echo)(4)('Try another instace name.');
      } else {
        (0, _printTools.error)(4)(err.message || 'Error while creating instance. Try again!');
      }
      (0, _printTools.echo)();
      process.exit(1);
    } finally {
      (0, _printTools.echo)(`${_chalk2.default.green('Done')}`);
      (0, _printTools.echo)(4)(`Syncano Instance ${_chalk2.default.cyan(newInstance.name)} has been created!`);
      (0, _printTools.echo)();
    }
    return newInstance;
  });

  return function createInstance(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=create-instance.js.map