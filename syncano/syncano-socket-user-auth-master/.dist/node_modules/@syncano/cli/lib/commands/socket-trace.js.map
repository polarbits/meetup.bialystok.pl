{"version":3,"sources":["../../src/commands/socket-trace.js"],"names":["debug","SocketTrace","constructor","context","spinner","session","Socket","traceTimers","scriptWatch","lastId","mainSpinner","grey","getFirstTrace","errorMsg","err","Error","find","parse","o","lineNumber","run","socketName","cmd","dim","msg","magenta","start","socket","get","stop","startCollectingTraces","sockets","list","queueSize","length","Promise","all","map","ws","getTraces","on","terminate","message","data","printTrace","JSON","trace","payload","status","traceUrl","links","self","fullTrace","getEndpointTraceByUrl","stdout","stderr","response","result","metadata","source","event_handler","traceHandlerName","printTraceTriggerLine","printTraceStdout","trim","errorString","split","traceData","prettyTrace","getPrettyTrace","printFullTrace","printSimpleError","traceFullEndpointName","endpoint","traceEndpointName","printTraceLine","content","printTraceBody","endpointCall","red","cyan","duration","remoteAddr","meta","REMOTE_ADDR","requestMethod","REQUEST_METHOD","exitCode","eventName","event","title","forEach","line","content_type","code","printFileLine","params","origFilePath","columnNumber","join","printTraceLines","lines","simpleError"],"mappings":"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","file":"socket-trace.js","sourcesContent":["import format from 'chalk'\nimport _ from 'lodash'\nimport stackTrace from 'stack-trace'\n\nimport { GlobalSpinner, SimpleSpinner } from './helpers/spinner'\nimport logger from '../utils/debug'\nimport { p, error, echo, printSourceCode } from '../utils/print-tools'\nimport { currentTime } from '../utils/date-utils'\n\nconst { debug } = logger('cmd-trace')\n\nexport default class SocketTrace {\n  constructor (context, spinner) {\n    this.session = context.session\n    this.Socket = context.Socket\n    this.traceTimers = []\n    this.scriptWatch = false\n    this.lastId = {}\n\n    if (spinner) {\n      this.mainSpinner = spinner\n    } else {\n      this.mainSpinner = new GlobalSpinner(p(3)(`${format.grey('waiting...')}`))\n    }\n  }\n\n  static getFirstTrace (errorMsg) {\n    const err = new Error(errorMsg)\n    return _.find(stackTrace.parse(err), (o) => o.lineNumber !== null)\n  }\n\n  async run ([socketName, cmd]) {\n    debug('SocketTrace run')\n    this.cmd = cmd\n\n    echo(2)(`ðŸ”Ž ${format.grey(' Tracing Socket calls')} ${format.dim('(Hit Ctrl-C to stop)')}`)\n    echo()\n\n    if (socketName) {\n      const msg = p(3)(`${format.magenta('getting socket:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      const socket = await this.Socket.get(socketName)\n      spinner.stop()\n      return this.startCollectingTraces(socket)\n    }\n\n    const msg = p(3)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n    const spinner = new SimpleSpinner(msg).start()\n    const sockets = await this.Socket.list()\n    this.mainSpinner.queueSize += sockets.length\n    spinner.stop()\n\n    return Promise.all(sockets.map((socket) => this.startCollectingTraces(socket)))\n  }\n\n  async startCollectingTraces (socket) {\n    debug('startCollectingTraces')\n    this.mainSpinner.start()\n\n    const ws = socket.getTraces()\n    ws.on('error', (err) => {\n      debug('ws error', err)\n      this.mainSpinner.stop()\n      ws.terminate()\n      error(err.message)\n      this.startCollectingTraces(socket)\n    })\n\n    ws.on('close', () => {\n      debug('ws closed, starting again')\n      this.startCollectingTraces(socket)\n    })\n\n    ws.on('message', async (data) => {\n      debug('ws message')\n      this.mainSpinner.stop()\n      await this.printTrace(socket, JSON.parse(data))\n      this.mainSpinner.start()\n    })\n  }\n\n  // Decide about how to print trace and which\n  async printTrace (socket, trace) {\n    if (!trace.payload || trace.payload.status === 'pending' || trace.payload.status === 'processing') return\n\n    const traceUrl = trace.payload.links.self\n    const fullTrace = await this.Socket.getEndpointTraceByUrl(traceUrl)\n    const { stdout, stderr, response } = fullTrace.result\n\n    if (trace.metadata.source === 'event_handler') {\n      debug(`Event handler trace: ${trace.metadata.event_handler}`)\n      const metadata = trace.metadata\n      const traceHandlerName = metadata.event_handler\n      SocketTrace.printTraceTriggerLine(fullTrace, metadata)\n      if (stdout) SocketTrace.printTraceStdout(stdout)\n      if (stderr) {\n        echo(6)(format.grey('script stderr:'))\n        const errorMsg = fullTrace.result.stderr.trim()\n\n        try {\n          const errorString = errorMsg.split('\\n')[0]\n          const traceData = SocketTrace.getFirstTrace(errorMsg)\n          const prettyTrace = socket.getPrettyTrace(traceData, traceHandlerName)\n          SocketTrace.printFullTrace({ prettyTrace, errorString })\n        } catch (err) {\n          SocketTrace.printSimpleError(errorMsg)\n        }\n      }\n    }\n\n    if (trace.metadata.source === 'endpoint') {\n      const traceFullEndpointName = trace.metadata.endpoint\n      const traceEndpointName = traceFullEndpointName.split('/')[1]\n\n      SocketTrace.printTraceLine(fullTrace, traceFullEndpointName)\n      if (stdout) SocketTrace.printTraceStdout(fullTrace.result.stdout)\n      if (response && response.content) SocketTrace.printTraceBody(fullTrace.result.response)\n      if (stderr) {\n        echo(6)(format.grey('script stderr:'))\n        const errorMsg = fullTrace.result.stderr.trim()\n\n        try {\n          const errorString = errorMsg.split('\\n')[0]\n          const traceData = SocketTrace.getFirstTrace(errorMsg)\n\n          const prettyTrace = socket.getPrettyTrace(traceData, traceEndpointName)\n          SocketTrace.printFullTrace({ prettyTrace, errorString })\n        } catch (err) {\n          SocketTrace.printSimpleError(errorMsg)\n        }\n      }\n    }\n  }\n\n  // Single line with date, id etc.\n  static printTraceLine (trace, traceEndpointName) {\n    const endpointCall = trace.status === 'success' ? format.grey('endpoint call:') : format.red('endpoint call:')\n    const endpoint = format.cyan(traceEndpointName)\n    const duration = format.dim(`${trace.duration} ms`)\n    const remoteAddr = format.dim(`(${trace.meta.REMOTE_ADDR})`)\n    const requestMethod = format.dim(trace.meta.REQUEST_METHOD)\n    const exitCode = format.cyan(\n      trace.result.response ? trace.result.response.status : '200'\n    )\n    echo(6)(`${endpointCall} ${currentTime()} ${endpoint} ${requestMethod} ${exitCode} ${remoteAddr} ${duration}`)\n  }\n\n  // Single line with date, id etc.\n  static printTraceTriggerLine (trace, metadata) {\n    const eventName = metadata.event_handler\n    const endpointCall = trace.status === 'success' ? format.grey('handler call:') : format.red('handler call:')\n    const event = format.cyan(eventName)\n    const socketName = format.cyan(metadata.socket)\n    const duration = format.dim(`${trace.duration} ms`)\n    echo(6)(`${endpointCall} ${currentTime()} ${event} handled by ${socketName} ${duration}`)\n  }\n\n  static printTraceStdout (stdout, title = 'script stdout:') {\n    echo(6)(format.grey(title))\n    echo()\n    stdout.split('\\n').forEach((line) => {\n      echo(14)(format.dim(line))\n    })\n    echo()\n  }\n\n  static printTraceBody (response) {\n    echo(8)(format.grey(`script body: (${response.content_type})`))\n    echo()\n    let code = response.content\n    try {\n      code = printSourceCode(response.content_type, response.content)\n    } catch (err) {\n      debug(err)\n    }\n    code.split('\\n').forEach((line) => {\n      echo(21)(line)\n    })\n    echo()\n  }\n\n  static printFileLine (params) {\n    echo(21)([\n      `${format.dim('at')} ${params.origFilePath}`,\n      `${format.dim('line:')} ${params.lineNumber},`,\n      `${format.dim('column:')} ${params.columnNumber}`\n    ].join(' '))\n    echo()\n  }\n\n  static printTraceLines (params) {\n    echo()\n    params.lines.forEach((line) => {\n      echo(21)(format.dim(line))\n    })\n    echo(21)((format.red(params.errorString)))\n  }\n\n  static printFullTrace (params) {\n    SocketTrace.printTraceLines({\n      lines: params.prettyTrace.lines,\n      errorString: params.errorString\n    })\n\n    SocketTrace.printFileLine({\n      origFilePath: params.prettyTrace.origFilePath,\n      lineNumber: params.prettyTrace.lineNumber,\n      columnNumber: params.prettyTrace.columnNumber\n    })\n  }\n\n  static printSimpleError (simpleError) {\n    echo()\n    const err = simpleError.split('\\n').join(`\\n${p(21)()}`)\n    echo(21)(format.dim.red(err))\n    echo()\n  }\n}\n"]}