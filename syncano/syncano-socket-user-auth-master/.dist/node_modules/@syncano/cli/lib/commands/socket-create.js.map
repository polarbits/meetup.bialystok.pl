{"version":3,"sources":["../../src/commands/socket-create.js"],"names":["debug","SocketCreate","constructor","context","session","Socket","run","socketNameArg","socketName","parse","process","cwd","name","questions","type","message","choices","getTemplatesChoices","map","choice","default","response","prompt","template","match","socket","create","cyan","getSocketPath","err"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAM,EAAEA,KAAF,KAAY,qBAAO,mBAAP,CAAlB;;AAEA,MAAMC,YAAN,CAAmB;AACjBC,cAAaC,OAAb,EAAsB;AACpB,SAAKC,OAAL,GAAeD,QAAQC,OAAvB;AACA,SAAKC,MAAL,GAAcF,QAAQE,MAAtB;AACD;;AAEKC,KAAN,CAAW,CAACC,aAAD,CAAX,EAA4B;AAAA;;AAAA;AAC1B,UAAIC,aAAaD,aAAjB;AACA,UAAIA,kBAAkB,GAAtB,EAA2B;AACzBC,qBAAa,eAAKC,KAAL,CAAWC,QAAQC,GAAR,EAAX,EAA0BC,IAAvC;AACD;;AAED,YAAKC,SAAL,GAAiB,CAAC;AAChBD,cAAM,UADU;AAEhBE,cAAM,MAFU;AAGhBC,iBAAS,mBAAE,CAAF,EAAK,iCAAL,CAHO;AAIhBC,iBAAS,MAAKX,MAAL,CAAYY,mBAAZ,GAAkCC,GAAlC,CAAsC,UAACC,MAAD;AAAA,iBAAY,mBAAE,CAAF,EAAKA,MAAL,CAAZ;AAAA,SAAtC,CAJO;AAKhBC,iBAAS;AALO,OAAD,CAAjB;;AAQA;AACA,YAAMC,WAAW,MAAM,mBAASC,MAAT,CAAgB,MAAKT,SAArB,CAAvB;AACA,YAAMU,WAAWF,SAASE,QAAT,CAAkBC,KAAlB,CAAwB,UAAxB,EAAoC,CAApC,CAAjB;;AAEA;AACA,UAAI;AACF,cAAMC,SAAS,MAAM,MAAKpB,MAAL,CAAYqB,MAAZ,CAAmBlB,UAAnB,EAA+Be,QAA/B,CAArB;AACA,8BAAK,CAAL,EAAS,0CAAyC,gBAAOI,IAAP,CAAYF,OAAOG,aAAP,EAAZ,CAAoC,EAAtF;AACA;AACD,OAJD,CAIE,OAAOC,GAAP,EAAY;AACZ7B,cAAM6B,GAAN;AACA,+BAAMA,IAAId,OAAV;AACD;AA1ByB;AA2B3B;AAjCgB;;kBAoCJd,Y","file":"socket-create.js","sourcesContent":["import path from 'path'\nimport inquirer from 'inquirer'\nimport format from 'chalk'\nimport logger from '../utils/debug'\nimport { p, echo, error } from '../utils/print-tools'\n\nconst { debug } = logger('cmd-socket-deploy')\n\nclass SocketCreate {\n  constructor (context) {\n    this.session = context.session\n    this.Socket = context.Socket\n  }\n\n  async run ([socketNameArg]) {\n    let socketName = socketNameArg\n    if (socketNameArg === '.') {\n      socketName = path.parse(process.cwd()).name\n    }\n\n    this.questions = [{\n      name: 'template',\n      type: 'list',\n      message: p(2)('Choose template for your Socket'),\n      choices: this.Socket.getTemplatesChoices().map((choice) => p(4)(choice)),\n      default: 1\n    }]\n\n    echo()\n    const response = await inquirer.prompt(this.questions)\n    const template = response.template.match(/\\((.*)\\)/)[1]\n\n    echo()\n    try {\n      const socket = await this.Socket.create(socketName, template)\n      echo(4)(`Your Socket configuration is stored at ${format.cyan(socket.getSocketPath())}`)\n      echo()\n    } catch (err) {\n      debug(err)\n      error(err.message)\n    }\n  }\n}\n\nexport default SocketCreate\n"]}