{"version":3,"sources":["../../src/commands/socket-deploy-hot.js"],"names":["debug","pendingUpdates","timer","SocketDeployCmd","constructor","context","session","Socket","registry","Registry","firstRun","mainSpinner","grey","run","socketName","cmd","dim","msg","magenta","spinner","start","socketList","flatList","socket","find","name","stop","existLocally","isProjectRegistryDependency","isDependencySocket","cyan","process","exit","configs","each","socketFromList","getConfigOptionsToAsk","then","config","deployProject","projectUpdateStatus","all","map","deploySocket","runStalker","queueSize","length","trace","traces","startCollectingTraces","catch","err","response","data","detail","reset","status","duration","getDuration","deployTimer","updateEnds","updateStatus","update","printUpdateSuccessful","red","traceback","split","line","join","message","bail","deployComponent","component","componentName","packageName","build","getSocketToUpdate","fileName","match","localSockets","isSocketFile","getComponentToUpdate","sockets","listLocal","componentsList","components","getLocal","getComponents","forEach","push","componentFound","some","isComponentFile","projectPath","stalker","create","on","changeType","socketToUpdate","componentToUpdate","setConfig","interval","persistent","catchupDelay","preferredMethods","followLinks","ignoreHiddenFiles","ignoreCommonPatterns","watch","filter","socketNameStr","errDetail","error","printUpdateFailed","JSON","parse"],"mappings":"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","file":"socket-deploy-hot.js","sourcesContent":["import _ from 'lodash'\nimport watchr from 'watchr'\nimport format from 'chalk'\nimport Promise from 'bluebird'\n\nimport logger from '../utils/debug'\nimport { SimpleSpinner, GlobalSpinner } from './helpers/spinner'\nimport { askQuestions } from './helpers/socket'\nimport { p, error, echo } from '../utils/print-tools'\nimport { currentTime, Timer } from '../utils/date-utils'\nimport SocketTraceCmd from './socket-trace'\nimport { CompileError } from '../utils/errors'\n\nconst { debug } = logger('cmd-socket-deploy')\n\nconst pendingUpdates = {}\nconst timer = new Timer()\n\nexport default class SocketDeployCmd {\n  constructor (context) {\n    this.context = context\n    this.session = context.session\n    this.Socket = context.Socket\n    this.registry = new context.Registry()\n    this.firstRun = true\n\n    this.mainSpinner = new GlobalSpinner(p(3)(`${format.grey('waiting...')}`))\n  }\n\n  async run ([socketName, cmd]) {\n    this.cmd = cmd\n\n    echo(2)(`🔥 ${format.grey(' Hot deploy started')} ${format.dim('(Hit Ctrl-C to stop)')}`)\n    echo()\n\n    if (socketName) {\n      debug(`Deploying Socket: ${socketName}`)\n      const msg = p(2)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      this.socketList = await this.Socket.flatList(socketName)\n      const socket = _.find(this.socketList, { name: socketName })\n      spinner.stop()\n\n      if (!(socket.existLocally || socket.isProjectRegistryDependency || socket.isDependencySocket)) {\n        echo()\n        error(4)(`Socket ${format.cyan(socketName)} cannot be found!`)\n        echo()\n        process.exit(1)\n      }\n    } else {\n      const msg = p(2)(`${format.magenta('getting sockets:')} ${currentTime()}`)\n      const spinner = new SimpleSpinner(msg).start()\n      this.socketList = await this.Socket.flatList()\n      spinner.stop()\n    }\n\n    const configs = {}\n\n    Promise.each(this.socketList, (socketFromList) => askQuestions(socketFromList.getConfigOptionsToAsk())\n      .then((config) => {\n        configs[socketFromList.name] = config\n      }))\n    .then(() => this.deployProject())\n    .then((projectUpdateStatus) =>\n      Promise.all(this.socketList.map((socket) => this.deploySocket(socket, configs[socket.name])))\n    )\n    .then(() => {\n      debug('Starting stalker')\n      this.runStalker()\n      this.mainSpinner.queueSize += 1\n      this.mainSpinner.queueSize += this.socketList.length\n      this.mainSpinner.start()\n\n      if (cmd.trace) {\n        const traces = new SocketTraceCmd(this.context, this.mainSpinner)\n        Promise.all(this.socketList.map((socket) => traces.startCollectingTraces(socket)))\n      }\n    })\n    .catch((err) => {\n      if (err.response && err.response.data && err.response.data.detail) {\n        error(4)(err.response.data.detail)\n      } else {\n        error(4)(err)\n      }\n    })\n  }\n\n  async deployProject () {\n    timer.reset()\n    const msg = p(4)(`${format.magenta('project deploy:')} ${currentTime()}`)\n    const spinner = new SimpleSpinner(msg).start()\n    await this.session.deployProject()\n    spinner.stop()\n    const status = format.grey('project synced:')\n    const duration = timer.getDuration()\n    echo(5)(`${status} ${currentTime()} ${duration}`)\n  }\n\n  async deploySocket (socket, config) {\n    debug(`deploySocket: ${socket.name}`)\n    const deployTimer = new Timer()\n    const msg = p(4)(`${format.magenta('socket deploy:')} ${currentTime()} ${format.cyan(socket.name)}`)\n    this.mainSpinner.stop()\n    const spinner = new SimpleSpinner(msg).start()\n\n    // We have to count here number of updates\n    if (!pendingUpdates[socket.name]) { pendingUpdates[socket.name] = 0 }\n\n    pendingUpdates[socket.name] += 1\n    if (pendingUpdates[socket.name] > 1) {\n      spinner.stop()\n      this.mainSpinner.start()\n      debug(`not updating, update pending: ${pendingUpdates[socket.name]}`)\n      return\n    }\n\n    const updateEnds = async () => {\n      this.mainSpinner.start()\n      // After update we have to understand if we should fire new one\n      pendingUpdates[socket.name] -= 1\n      if (pendingUpdates[socket.name] > 0) {\n        pendingUpdates[socket.name] = 0\n        await this.deploySocket(socket, config)\n      }\n    }\n\n    try {\n      const updateStatus = await socket.update({ config })\n\n      spinner.stop()\n      SocketDeployCmd.printUpdateSuccessful(socket.name, updateStatus, deployTimer)\n      await updateEnds()\n    } catch (err) {\n      spinner.stop()\n      if (err instanceof CompileError) {\n        const status = format.red('    compile error:')\n        echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)}\\n\\n${err.traceback.split('\\n').map(line => p(8)(line)).join('\\n')}`)\n      } else {\n        const status = format.red('socket sync error:')\n        echo(2)(`${status} ${currentTime()} ${format.cyan(socket.name)} ${format.red(err.message)}`)\n      }\n\n      if (this.cmd.bail) {\n        SocketDeployCmd.bail()\n      }\n      updateEnds()\n      spinner.stop()\n    }\n  }\n\n  async deployComponent (component) {\n    const componentName = component.packageName\n    debug(`deployComponent: ${componentName}`)\n    const deployTimer = new Timer()\n    const msg = p(`${format.magenta('component build:')} ${currentTime()} ${format.cyan(componentName)}`)\n    this.mainSpinner.stop()\n    const spinner = new SimpleSpinner(msg).start()\n\n    // We have to count here number of updates\n    if (!pendingUpdates[componentName]) { pendingUpdates[componentName] = 0 }\n\n    pendingUpdates[componentName] += 1\n    if (pendingUpdates[componentName] > 1) {\n      spinner.stop()\n      this.mainSpinner.start()\n      debug(`not updating, update pending: ${pendingUpdates[componentName]}`)\n      return\n    }\n\n    const updateEnds = async () => {\n      this.mainSpinner.start()\n      // After update we have to understand if we should fire new one\n      pendingUpdates[componentName] -= 1\n      if (pendingUpdates[componentName] > 0) {\n        pendingUpdates[componentName] = 0\n        await this.deployComponent(component)\n      }\n    }\n\n    try {\n      await component.build()\n\n      spinner.stop()\n      SocketDeployCmd.printUpdateSuccessful(componentName, {status: 'ok'}, deployTimer)\n      await updateEnds()\n    } catch (err) {\n      spinner.stop()\n      if (err instanceof CompileError) {\n        const status = format.red('    build error:')\n        echo(2)(`${status} ${currentTime()} ${format.cyan(componentName)}\\n\\n${err.traceback.split('\\n').map(line => p(8)(line)).join('\\n')}`)\n      } else {\n        const status = format.red('build error:')\n        echo(2)(`${status} ${currentTime()} ${format.cyan(componentName)} ${format.red(err.message)}`)\n      }\n\n      if (this.cmd.bail) {\n        SocketDeployCmd.bail()\n      }\n      updateEnds()\n      spinner.stop()\n    }\n  }\n\n  getSocketToUpdate (fileName) {\n    if (fileName.match(/\\/test\\//) || fileName.match(/\\/components\\//)) {\n      return false\n    }\n    return this.localSockets.find((socket) => socket.isSocketFile(fileName))\n  }\n\n  async getComponentToUpdate (fileName) {\n    const sockets = await this.Socket.listLocal()\n    const componentsList = []\n    await Promise.all(sockets.map(async socket => {\n      const components = await this.Socket.getLocal(socket).getComponents()\n      components.forEach(component => {\n        componentsList.push(component)\n      })\n    }))\n    let componentFound = null\n    componentsList.some(component => {\n      if (component.isComponentFile(fileName)) {\n        componentFound = component\n      }\n    })\n    return componentFound\n  }\n\n  runStalker () {\n    // Stalking files\n    debug('watching:', this.session.projectPath)\n    this.stalker = watchr.create(this.session.projectPath)\n    this.stalker.on('change', async (changeType, fileName) => {\n      timer.reset()\n      const socketToUpdate = this.getSocketToUpdate(fileName)\n      const componentToUpdate = await this.getComponentToUpdate(fileName)\n      if (componentToUpdate) {\n        this.deployComponent(componentToUpdate)\n      } else if (socketToUpdate) {\n        this.deploySocket(socketToUpdate)\n      }\n    })\n\n    this.stalker.setConfig({\n      interval: 300,\n      persistent: true,\n      catchupDelay: 300,\n      preferredMethods: ['watch', 'watchFile'],\n      followLinks: true,\n      ignoreHiddenFiles: true, // ignoring .bundles, .dist etc.\n      ignoreCommonPatterns: true\n    })\n\n    // First start of the stalker\n    this.stalker.watch(() => {})\n\n    this.localSockets = _.filter(this.socketList, { existLocally: true })\n  }\n\n  static bail () {\n    echo()\n    process.exit(1)\n  }\n\n  static printUpdateSuccessful (socketName, updateStatus, deployTimer) {\n    debug('printUpdateSuccessful', socketName, updateStatus)\n    const duration = format.dim(deployTimer.getDuration())\n    const socketNameStr = `${format.cyan(socketName)}`\n\n    if (updateStatus.status === 'ok') {\n      const status = format.grey('socket synced:')\n      echo(6)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    } else if (updateStatus.status === 'stopped') {\n      // const status = format.grey('socket in sync:');\n      // echo(5)(`${status} ${currentTime()} ${socketNameStr} ${duration}`);\n    } else if (updateStatus.status === 'error') {\n      const errDetail = format.red(updateStatus.message.error)\n      const status = format.red('socket not synced:')\n      echo(2)(`${status} ${currentTime()} ${socketNameStr} ${duration} ${errDetail}`)\n    } else {\n      const status = format.red('socket not synced:')\n      echo(2)(`${status} ${currentTime()} ${socketNameStr} ${duration}`)\n    }\n  }\n\n  static printUpdateFailed (socketName, err, deployTimer) {\n    const duration = deployTimer.getDuration()\n    const errDetail = JSON.parse(err).detail\n    echo(3)(`${format.red('files not synced:')} ${currentTime()} ${socketName} ${duration} ${errDetail}`)\n  }\n}\n"]}