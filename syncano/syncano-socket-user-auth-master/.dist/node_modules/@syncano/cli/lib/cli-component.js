#!/usr/bin/env node
'use strict';

var _program = require('./program');

var _program2 = _interopRequireDefault(_program);

var _commands = require('./commands');

var _commands2 = _interopRequireDefault(_commands);

var _session = require('./utils/session');

var _session2 = _interopRequireDefault(_session);

var _context = require('./utils/context');

var _context2 = _interopRequireDefault(_context);

var _validateCommands = require('./utils/validate-commands');

var _validateCommands2 = _interopRequireDefault(_validateCommands);

var _printTools = require('./utils/print-tools');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

const setup = (() => {
  var _ref = _asyncToGenerator(function* () {
    yield _context2.default.session.load();

    _program2.default.command('link <path>').group('Components').description('Link all components to your project').action((() => {
      var _ref2 = _asyncToGenerator(function* (...options) {
        _session2.default.isAuthenticated();
        _session2.default.hasProject();
        (0, _printTools.echo)();
        new _commands2.default.ComponentLink(_context2.default).run(options);
      });

      return function () {
        return _ref2.apply(this, arguments);
      };
    })());

    _program2.default.command('list').group('Components').description('List all components').action((() => {
      var _ref3 = _asyncToGenerator(function* (...options) {
        _session2.default.isAuthenticated();
        _session2.default.hasProject();
        (0, _printTools.echo)();
        new _commands2.default.ComponentList(_context2.default).run(options);
      });

      return function () {
        return _ref3.apply(this, arguments);
      };
    })());

    _program2.default.on('*', function (commandsArr) {
      return (0, _validateCommands2.default)(commandsArr);
    });

    if (!process.argv.slice(2).length) {
      _program2.default.outputHelp();
    }

    _program2.default.parse(process.argv);
  });

  return function setup() {
    return _ref.apply(this, arguments);
  };
})();

setup();
//# sourceMappingURL=cli-component.js.map