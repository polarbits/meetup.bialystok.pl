'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _debug2.default)('core:query-builder');

class QueryBuilder {
  constructor(instance) {
    this.instance = instance;
    this.baseUrl = `https://${instance.host}`;
    this.result = [];
  }

  _getSyncanoURL() {
    const { apiVersion, host } = this.instance;

    return `https://${host}/${apiVersion}`;
  }

  _getInstanceURL(instanceName) {
    return `${this._getSyncanoURL()}/instances/${instanceName}`;
  }

  fetch(url, options, headers = {}) {
    const headersToSend = Object.assign({
      'content-type': 'application/json',
      'x-api-key': this.instance.token
    }, headers);

    return (0, _nodeFetch2.default)(url, _extends({
      headers: headersToSend
    }, options)).then(_utils.parseJSON).then(_utils.checkStatus);
  }

  nonInstanceFetch(url, options, headers) {
    return (0, _nodeFetch2.default)(url, _extends({
      headers: _extends({
        'content-type': 'application/json'
      }, headers)
    }, options)).then(_utils.parseJSON).then(_utils.checkStatus);
  }

  get query() {
    return this._query || {};
  }

  get queries() {
    return this._queries || [];
  }

  get relationships() {
    return this._relationships || [];
  }

  get mappedFields() {
    return this._mappedFields || [];
  }

  withQuery(query) {
    debug('withQuery', query);
    this._query = Object.assign({}, this.query, query);

    return this;
  }

  withRelationships(relationships) {
    this._relationships = this.relationships.concat(relationships);

    return this;
  }

  withMappedFields(fields) {
    this._mappedFields = Object.assign({}, this.mappedFields, ...fields);

    return this;
  }
}
exports.default = QueryBuilder;
module.exports = exports['default'];